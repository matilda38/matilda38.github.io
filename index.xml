<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>log.info – blog</title>
    <link>/</link>
    <description>Recent content in blog on log.info</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 30 Dec 2019 10:22:22 +0900</lastBuildDate>
    
	  <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
      
      
    
    
    <item>
      <title>Blog: Wine list for beginners</title>
      <link>/blog/2019/12/30/wine-list-for-beginners/</link>
      <pubDate>Mon, 30 Dec 2019 10:22:22 +0900</pubDate>
      
      <guid>/blog/2019/12/30/wine-list-for-beginners/</guid>
      <description>
        
        
        &lt;p&gt;부담스럽지 않은 입문용 쉬라즈/멜롯 세미나 를 진행한다면 시음하고 싶은 와인 리스트&lt;/p&gt;
&lt;p&gt;d&amp;rsquo;Arenberg, Footbolt Shiraz 2016
다렌버그, 풋볼트 쉬라즈 2016&lt;/p&gt;
&lt;p&gt;와인 구매하는 법&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Passing Slice to a function</title>
      <link>/blog/2019/12/26/passing-slice-to-a-function/</link>
      <pubDate>Thu, 26 Dec 2019 10:45:22 +0900</pubDate>
      
      <guid>/blog/2019/12/26/passing-slice-to-a-function/</guid>
      <description>
        
        
        &lt;p&gt;절차지향 프로그래밍의 가장 흔한 특징은 배열 개념이다. 배열은 간단한 것처럼 보이지만 우리가 언어에 배열을 적용할때에는 몇가지 답변해야할 문제들이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;고정된 사이즈인가 변수인가?&lt;/li&gt;
&lt;li&gt;사이즈가 타입의 부분인가?&lt;/li&gt;
&lt;li&gt;다차원 배열은 어떻게 생겼는가?&lt;/li&gt;
&lt;li&gt;빈 배열이 의미가 있는가?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 문제들의 답변은 배열이 그저 언어의 특징인지, 디자인의 핵심부분인지에 영향을 끼친다.&lt;/p&gt;
&lt;p&gt;Go에서는 고정 길이 배열을 기반으로 만들어져 유동적이고 확장가능한 데이터 구조를 가지는 Slice가 이 문제의 답변의 핵심이다.&lt;/p&gt;
&lt;h1 id=&#34;배열&#34;&gt;배열&lt;/h1&gt;
&lt;p&gt;배열은 고에서 중요한 부분이지만, 어떤 건물의 토대처럼 눈에 보이는 컴포넌트들 아래 숨겨져있다. 우리는 좀 더 흥미로운 주제인 Slice를 이야기하기 전에 배열에 대해서 간단히 짚고 넘어가야한다.&lt;/p&gt;
&lt;p&gt;배열은 사이즈가 타입의 일부이고, 이는 표현성을 한정시키기 떄문에 Go 프로그램에서 그닥 잘 보이지 않는다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;buffer&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;256&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이는 buffer라는 256바이트짜리 변수를 선언한다. 이 변수 buffer의 타입은 256이라는 사이즈를 포함한다. 이 배열과 관련된 데이터는 딱 원소들의 배열일 것이다. 설계상으로 아마 이렇게 메모리에 있을 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;buffer: byte byte byte ... &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;256&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;times&lt;/span&gt; ... byte byte byte
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;즉, 이 변수는 256 바이트의 데이터&amp;quot;만&amp;quot; 저장하고 있다. 이 원소들은 buffer[0], buffer[1] 같은 친숙한 인덱싱 문법으로 접근할 수 있다. 배열은 보통 slice를 위한 저장소로서의 목적으로 가장 많이 사용된다.&lt;/p&gt;
&lt;h1 id=&#34;slice&#34;&gt;slice&lt;/h1&gt;
&lt;p&gt;slice를 쓰기위해서는 그것들이 무엇이고 무엇을 하는지 정확히 이해를 하고 있어야한다.&lt;/p&gt;
&lt;p&gt;slice는 slice 변수 그 자체와는 별개로 저장되는 배열의 연속적인 섹션을 표현하기 위한 자료구조이다. slice는 배열이 아니다. slice는 배열의 일부를 나타낸다. 우리 buffer 배열이 있다고 할때, 배열을 slicing 함으로써 우리는 100에서 150까지의 원소를 나타내는 slice를 만들 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;buffer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;150&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// var slice = buffer[100:150]
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// slice := buffer[100:150]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;slice 변수는 정확히 무엇일까? 정확히 그런건 아니지만, 일단 slice를 길이와 배열의 원소에 대한 포인터, 두 개 원소를 가지는 자료구조라고 생각해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;sliceHeader&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;Length&lt;/span&gt;        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;ZerothElement&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;sliceHeader&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;Length&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;        &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;ZerothElement&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;buffer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;],&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;물론 이건, 그냥 예시다. 사실 sliceHeader는 프로그래머들에게 보이는 영역이 아니고, 원소의 포인터의 타입이 원소 타입에 의존적이지만, 이 예시는 slice의 원리를 설명하고 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;slice2&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 밑에 sliceHeader 구조체는 이런식으로 생겼을것이다.
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// slice2 := sliceHeader {
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 	 Length: 5,
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 	 ZerothElement: &amp;amp;buffer[105],
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 헤더가 buffer 변수에 저장되 있는 같은 배열을 가르키고 있다는 걸 주의해야한다.&lt;/p&gt;
&lt;p&gt;또한 reslice할 수 있는데, slice를 slice해서 기존의 slice 구조체로 결과를 다시 저장하는 것을 의미한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이것의 sliceHeader 구조는 slice2 변수꺼와 아예 같을 것이다. slice를 truncate할때와 같이, reslicing을 하는 경우는 종종 볼 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// sliceHeader {
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//	 Length: 3,
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//	 ZerothElement: &amp;amp;buffer[106]
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;짬 찬 go 프로그래머가 slice header 에 대해서 말하는 걸 들은 적 있을 것이다. slice header는 사실 실제로 slice 변수가 가지고 있는 값이다. slice를 argument로 가지는 함수를 호출할때, 함수에 실제로 전달되는 건 sliceheader이다. slice header에는 사실 한가지 아이템이 더 있는데, 일단 슬라이스 헤더의 존재여부가 slice를 다루는 프로그램에 어떤 영향을 주는 지부터 알아본다.&lt;/p&gt;
&lt;h1 id=&#34;함수에-slice를-전달할때&#34;&gt;함수에 slice를 전달할때&lt;/h1&gt;
&lt;p&gt;Slice가 포인터를 포함하고 있지만 그자체로서는 &amp;ldquo;값&amp;quot;이라는 걸 이해하는 게 중요하다.&lt;/p&gt;
&lt;p&gt;Slice는 포인터와 길이를 가지고 있는 구조체 값이다. 구조체를 가르키는 포인터가 아니다.&lt;/p&gt;
&lt;p&gt;이전 예시에서 IndexRune을 호출할때 우리는 slice header의 복사본을 전달한것이다.&lt;/p&gt;
&lt;p&gt;예를 들어,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;AddOneToEachElement&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;slice를 돌면서 값을 1씩 증가시키는 함수가 있다고 할때,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;buffer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;before&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;AddOneToEachElement&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;after&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;slice header가 &lt;em&gt;값&lt;/em&gt;으로 전달된다고 하더라도, 헤더에는 배열의 원소를 가르키는 pointer가 있기 때문에, 기존 슬라이스 헤더와 함수에 전달된 복사된 헤더 모두 같은 배열을 가르킨다. 그러므로, 함수가 return될때 slice들의 원소 값들이 변경된 걸 확인할 수 있는 것이다.&lt;/p&gt;
&lt;p&gt;함수 파라미터는 정말 &lt;em&gt;복사본&lt;/em&gt;이다. 아래 예시에서 확인할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;SubtractOneFromLength&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Before: len(slice) =&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;newSlice&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;SubtractOneFromLength&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;After:  len(slice) =&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;slice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;After:  len(newSlice) =&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;newSlice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go 에서 파라미터를 전달할때 Reference가 아닌, Value로 전달한다. Slice의 경우에도 마찬가지이다. 이는 Pointer와 길이를 가진 구조체 값이라고 할 수 있다.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: gorm-postgresql 사용 주의</title>
      <link>/blog/2019/12/20/gorm-postgresql-%EC%82%AC%EC%9A%A9-%EC%A3%BC%EC%9D%98/</link>
      <pubDate>Fri, 20 Dec 2019 10:45:22 +0900</pubDate>
      
      <guid>/blog/2019/12/20/gorm-postgresql-%EC%82%AC%EC%9A%A9-%EC%A3%BC%EC%9D%98/</guid>
      <description>
        
        
        &lt;p&gt;gorm 을 통해 go 에서 orm을 사용하고 있었다. gorm은 mysql, postgresql 등 메인 dbms를 지원하면서도 꽤 편리하게 데이터베이스 operation들을 관리할 수 있었기 때문에 잘 사용하고 있었다.&lt;/p&gt;
&lt;p&gt;계속 조회만 했었어서 Update 로직을 딱히 사용할 일이 없다가, 이번에 한번 사용할 일이 있어서 사용해보았다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;rdb&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Debug&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Table&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Where&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;user_id = $1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;UserID&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;UpdateColumn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;test_column&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;postgres&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Jsonb&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;RawMessage&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;resBytes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;뭐 이런 코드였는데, 자꾸 에러가 발생하길래 뭐지싶어서 디버그 옵션을 키고 돌려봤다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pq: column &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;test_column&amp;#34;&lt;/span&gt; is of &lt;span style=&#34;color:#204a87&#34;&gt;type&lt;/span&gt; jsonb but expression is of &lt;span style=&#34;color:#204a87&#34;&gt;type&lt;/span&gt; text
UPDATE &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;testcases&amp;#34;&lt;/span&gt; SET &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;test_column&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;[123 34 99 111 ~ ]&amp;#39;&lt;/span&gt; WHERE &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;user_id&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;[123 34 99 111 ~ ]&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;쿼리가 저렇게 찍혀있었다. 즉, 앞에 있는 where 절의 user_id 에 test_column 에 넣을 데이터가 덮어쓰기 되어있었다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;rdb&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Debug&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Table&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;UpdateColumn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;test_column&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;postgres&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Jsonb&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;RawMessage&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;resBytes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Where&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;user_id = $1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;UserID&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;혹시 몰라서 where 절의 위치를 바꿔봤는데 아예 where 절이 무시된다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://gorm.io/docs/update.html&#34;&gt;http://gorm.io/docs/update.html&lt;/a&gt; 공식 documentation에서&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;db&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Table&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Where&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;id IN (?)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Updates&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{}{&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//// UPDATE users SET name=&amp;#39;hello&amp;#39;, age=18 WHERE id IN (10, 11);
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 코드가 정상 실행되는 걸 보니 mysql에서는 위와 같은 방식의 update가 정상적으로 실행되는 듯하다. 아마도 postgresql 의 placeholder 관련되서 버그가 있어서 안먹는것으로 추정된다.&lt;/p&gt;
&lt;p&gt;Table에 Operation을 날리는게 아니라 Model 기준으로 Update을 수행하게 되면 정상적으로 동작하는 것을 확인했다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;rdb&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Model&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;UpdateColumn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;test_column&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;postgres&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Jsonb&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;RawMessage&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;resBytes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Model은 gorm에서는 특정 Row를 가르킨다고 보면 된다. 따라서 Model 의 파라미터로 들어가는 user 객체에는 Id 컬럼이 반드시 채워져있어야한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;ID&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;`gorm:&amp;#34;id&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;Name&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;`gorm:&amp;#34;name&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;TestColumn&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;postgres&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Jsonb&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;`gorm:&amp;#34;test_column&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;IsEnabled&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;`gorm:&amp;#34;is_enabled&amp;#34;`&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;users&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;User&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rdb&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Where&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;is_enabled = $1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Find&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;users&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;뭐 이런식으로 하면 user들을 query로 땡겨와서 slice 안에 넣어놓고 각 user의 특정 컬럼값을 Update하는 로직을 작성할 수 있을 것이다.
그동안은 Table 에 직접 Operation하는 것이 좀 더 명시적이라고 생각해서 그런식으로 코드를 작성했었는데, 위와 같이 Model기준으로 하는게 코드상 버그도 없고 공식 Documentation이나 gorm usage들에서 많이 사용하는 방식인 듯하다.&lt;/p&gt;
&lt;p&gt;물론 Explict하게도 해결할 수 있다. 무식하지만 쿼리를 그냥 때리는 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;rdb&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Exec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;UPDATE test SET test_column=$1 WHERE user_id=$2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;postgres&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Jsonb&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;RawMessage&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;resBytes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;UserID&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;쿼리를 그냥 execute(실행)하면 사실 위와같은 문제는 해결 할 수 있다.&lt;/p&gt;
&lt;p&gt;Model 기준으로 많이 사용하고 있으니, 한번 Model기준으로 앞으로 작성해보려고한다.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: string split</title>
      <link>/blog/2019/12/10/string-split/</link>
      <pubDate>Tue, 10 Dec 2019 08:22:22 +0900</pubDate>
      
      <guid>/blog/2019/12/10/string-split/</guid>
      <description>
        
        
        &lt;p&gt;Json diff를 뜨고 &amp;ldquo;\n&amp;quot;으로 split을 했는데 자꾸 예상한 길이보다 1씩 길게 나오는것이었다.
go 내장함수인 strings.Split 요놈이 문제인가 해서 한번 테스트를 해봤다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;hello&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;안녕하세요\n 반갑습니다.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;rune&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;문제가 되는 문자열의 마지막 Rune이 U+000A, 즉 10이었다. 알고보니 이는 New line(개행문자)의 unicode중 하나였고, Split는 문제가 없었다. string 을 제대로 출력하고 테스트해보기 위해 rune을 활용하면 좋다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;참고1: &lt;a href=&#34;http://pyrasis.com/book/GoForTheReallyImpatient/Unit45/02&#34;&gt;utf8 패키지 내 함수 참고자료&lt;/a&gt;
golang은 모두 utf8 인코딩 기반이기 때문에, 한글이나 특수문자를 표현하기 위해 utf8 라이브러리 내의 여러가지 함수를 사용해보면 편하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;다만&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;hello&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;안녕하세요\n반갑습니다\n&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%q&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;strings&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Split&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;hello&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// [&amp;#34;안녕하세요&amp;#34;, &amp;#34;반갑습니다&amp;#34;, &amp;#34;&amp;#34;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;맨마지막에 저렇게 empty string이 나오는게 싫어서 저렇게 empty string을 제외하고 Split하는 방법에 대해 좀 찾아보니, 아래와 같은 함수를 찾았다. splitFn라는 함수에 separator 를 정의하고 해당 함수를 strings.FieldsFunc 라는 메소드에 파라미터로 넘기는 방식으로 Split을 수행하면 empty string이 무시된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;splitFn&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;rune&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;%q&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;strings&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FieldsFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;hello&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;splitFn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//[&amp;#34;안녕하세요&amp;#34; &amp;#34;반갑습니다&amp;#34;]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: goland tips</title>
      <link>/blog/2019/12/05/goland-tips/</link>
      <pubDate>Thu, 05 Dec 2019 08:22:22 +0900</pubDate>
      
      <guid>/blog/2019/12/05/goland-tips/</guid>
      <description>
        
        
        &lt;p&gt;cmd+ shift+ f =&amp;gt; find in path (goland)&lt;/p&gt;
&lt;p&gt;코드 어딧는지 찾기 딱좋다!&lt;/p&gt;
&lt;p&gt;cmd + O =&amp;gt; 기능 쫙 보는 찾기&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: DDA 스터디</title>
      <link>/blog/2019/11/30/dda-%EC%8A%A4%ED%84%B0%EB%94%94/</link>
      <pubDate>Sat, 30 Nov 2019 10:45:22 +0900</pubDate>
      
      <guid>/blog/2019/11/30/dda-%EC%8A%A4%ED%84%B0%EB%94%94/</guid>
      <description>
        
        
        &lt;h1 id=&#34;dda-스터디&#34;&gt;DDA 스터디&lt;/h1&gt;
&lt;h2 id=&#34;transaction&#34;&gt;Transaction&lt;/h2&gt;
&lt;p&gt;트랜잭션은은 여러 개의 읽기와 쓰기를 하나의 논리적인 유닛으로 묶는다.
-&amp;gt; 그룹으로 묶은 오퍼레이션의 부분이 실패하면 전체가 실패한다.&lt;/p&gt;
&lt;p&gt;safety guarantee (안정성 보장) =&amp;gt; application 입장에서는 좋다.&lt;/p&gt;
&lt;p&gt;=&amp;gt; 이런 걸 보장 : ACID 보장해야함.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Atomicity(원자성)&lt;/strong&gt;
한 오퍼레이션이 더 작은 부분으로 쪼개지지 않는것. 디비에 쓰다가 반만 썼는데 &amp;ldquo;성공&amp;quot;하면 안되고, &amp;ldquo;실패&amp;quot;하고 마치 어떤 변화도 없었던 것처럼 유지해야함.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Consistency&lt;/em&gt;
같은 데이터를 바라볼때 같은 값을 가지는 것. Consistensy를 실시간으로 만족시키는것은 퍼포먼스 적으로 힘들고, 그래서 eventual consistency같은 개념이 등장하는 것.&lt;/p&gt;
&lt;h3 id=&#34;isolation&#34;&gt;&lt;em&gt;Isolation&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Serializability&lt;/em&gt;
동시다발적인 요청이 들어오더라고 마치 serial한 요청이 들어온 것처럼 =&amp;gt; 어려움.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;em&gt;Durability&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;커밋 success시엔 db crush가 나든 hardware fault가 나든 레코드를 잊아뿌면 안된다.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Single Node&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;write-ahead log를 유지해서 폴트가 나도 복구할수있도록
Replicated database&lt;/li&gt;
&lt;li&gt;몇개의 노드들에게 copy가 되야 함.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Multi-object Transactions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Violating atomicity example
: 메일 보내고, unread += 1 하는 경우 메일보내고 unread올릴라그랬는데 crash
메일은 보냈으나 상대방의 안읽음 +=1 을 못한경우 =&amp;gt; 에러!
해결:  BEGIN TRANSACTION ~ END TRANSACTION&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;isolation-1&#34;&gt;Isolation&lt;/h3&gt;
&lt;p&gt;Weak Isolation 을 제공&lt;/p&gt;
&lt;p&gt;So, 개발자가 주의해서 사용해야한다.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Dirty Write&lt;/dt&gt;
&lt;dd&gt;row-level lock을 걸어야댐.
Dirty Read&lt;/dd&gt;
&lt;dd&gt;갱신되지않는 데이터를 보이지 않게. 커밋된 데이터만 볼수있게.
Trasaction 이 완료되기전까지는 Previous만 보여주고 Transaction이 끝났을때 current를 보여준다.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;snapshot isolation and repeatable read&lt;/p&gt;
&lt;p&gt;앨리스 계좌 조회
1번 계좌 잔액 500원 -&amp;gt; 600원
2번 계좌 잔액 500원 -&amp;gt; 400원&lt;/p&gt;
&lt;p&gt;할떄 순간적으로 500/400으로 조회되는 상황&lt;/p&gt;
&lt;p&gt;일반적안 계좌조회 상황에서는 새로고침하면 문제가 안되지만, backup이나 anayltic 등에서는 큰 문제가 된다.(잘못된 데이터가 반영)&lt;/p&gt;
&lt;p&gt;스냅샷 isolation 은 일반적으로 write lock을 사용한다.&lt;/p&gt;
&lt;h3 id=&#34;implementing-snapshot-isolation-using-multi-version-objects&#34;&gt;Implementing snapshot isolation using multi-version objects&lt;/h3&gt;
&lt;p&gt;history를 들구다닌다.&lt;/p&gt;
&lt;p&gt;내 transaction id 보다 작은 값을 가진 history의 값을 가져가면된다.&lt;/p&gt;
&lt;p&gt;update = delete + create&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In progress인 transaction 을 쫙 가져오고, 얘네들에 의한 변화는 쫙 무시.&lt;/li&gt;
&lt;li&gt;Aborted trancation 에 의한 변화는 무시.&lt;/li&gt;
&lt;li&gt;나보다 나중의 transaction 에 변화는 무시.&lt;/li&gt;
&lt;li&gt;나보다 먼저지만, commit 되지않은거는 무시한다.&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 클로저를 고루틴으로 실행할때 주의할점.</title>
      <link>/blog/2019/11/30/%ED%81%B4%EB%A1%9C%EC%A0%80%EB%A5%BC-%EA%B3%A0%EB%A3%A8%ED%8B%B4%EC%9C%BC%EB%A1%9C-%EC%8B%A4%ED%96%89%ED%95%A0%EB%95%8C-%EC%A3%BC%EC%9D%98%ED%95%A0%EC%A0%90./</link>
      <pubDate>Sat, 30 Nov 2019 10:45:22 +0900</pubDate>
      
      <guid>/blog/2019/11/30/%ED%81%B4%EB%A1%9C%EC%A0%80%EB%A5%BC-%EA%B3%A0%EB%A3%A8%ED%8B%B4%EC%9C%BC%EB%A1%9C-%EC%8B%A4%ED%96%89%ED%95%A0%EB%95%8C-%EC%A3%BC%EC%9D%98%ED%95%A0%EC%A0%90./</guid>
      <description>
        
        
        &lt;p&gt;go routine 만들 떄 익명함수로 할때 마지막 변수갑스로 다 써서 개망할뻔&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Closure(클로저)는 함수 바깥에 있는 변수를 참조하는 함수값을 일컫는다. 함수가 선언될 때의 환경을 계속 유지하여 프로그램의 흐름을 변수에 저장하기 위해 사용한다. 클로저는 함수형 언어의 큰 특징이며, Go 는 클로저를 통해 함수형 언어의 기능을 구현하고 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;참고: &lt;a href=&#34;http://pyrasis.com/book/GoForTheReallyImpatient/Unit25&#34;&gt;http://pyrasis.com/book/GoForTheReallyImpatient/Unit25&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;클로저를-고루틴으로-실행하기&#34;&gt;클로저를 고루틴으로 실행하기&lt;/h1&gt;
&lt;p&gt;반복문 내에 go routine를 삽입하여 concurrent한 Request를 날리는 로직을 작성하고 싶다고 하자.&lt;/p&gt;
&lt;p&gt;처음엔 이런식으로 하면 될줄 알았다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;
 
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
 
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;helloworld&amp;#34;&lt;/span&gt;
 
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://post.naver.com/%v/%v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 반복문의 변수를 클로저에서 바로 사용
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}()&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;예상한 결과&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://post.naver.com/helloworld/1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://post.naver.com/helloworld/2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://post.naver.com/helloworld/3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://post.naver.com/helloworld/99&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;실제 결과&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://post.naver.com/helloworld/100&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://post.naver.com/helloworld/100&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://post.naver.com/helloworld/100&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://post.naver.com/helloworld/100&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그렇게 되는 이유는,&lt;/p&gt;
&lt;p&gt;클로저를 고루틴으로 사용할때는 반복문이 끝난 뒤에 고루틴이 실행되기 때문이다. 따라서, 고루틴이 생성된 시점의 변수 i의 값은 100이다. 따라서 모두&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://post.naver.com/helloworld/100&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;값으로 요청이 날라가게 되는것이다. 따라서 클로저를 고루틴으로 실행할때 반복문에 의해 바뀌는 변수는 반드시 파라미터로 넘겨줘야한다. 파라미터로 넘겨주는 시점에 해당 변수의 값이 복사되므로, 고루틴이 생성될때 그대로 사용할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;
 
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
 
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;helloworld&amp;#34;&lt;/span&gt;
 
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;          &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 익명 함수를 고루틴으로 실행(클로저)
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;http://post.naver.com/%v/%v&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;                      &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 반복문의 변수는 매개변수로 넘겨줌
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: concurrency is not parallelism</title>
      <link>/blog/2019/11/28/concurrency-is-not-parallelism/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/11/28/concurrency-is-not-parallelism/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://talks.golang.org/2012/concurrency.slide#1&#34;&gt;https://talks.golang.org/2012/concurrency.slide#1&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;concurrency&#34;&gt;concurrency&lt;/h1&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: aws-lambda-in-go</title>
      <link>/blog/2019/11/25/aws-lambda-in-go/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/11/25/aws-lambda-in-go/</guid>
      <description>
        
        
        &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Handler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;context&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Context&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Open&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;config.json&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Close&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;

	&lt;span style=&#34;color:#000&#34;&gt;conf&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Configuration&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{}&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;json&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NewDecoder&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Decode&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;conf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Initialize connection string
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#000&#34;&gt;host&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;password&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;database&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Host&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Password&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Database&lt;/span&gt;

	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;connectionString&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Sprintf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;host=%s user=%s password=%s dbname=%s&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;host&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;password&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;database&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color:#000&#34;&gt;db&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;sql&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Open&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;postgres&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;connectionString&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;db&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Close&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;

	&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// TODO: 유저 프로파일 찌르기
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#000&#34;&gt;rows&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;db&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;select * from experiments limit 5&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rows&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Close&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;

	&lt;span style=&#34;color:#000&#34;&gt;cols&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rows&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Columns&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;

	&lt;span style=&#34;color:#000&#34;&gt;rowValues&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;([][]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{},&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color:#000&#34;&gt;vals&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;([]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{},&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cols&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;

	&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// pointer of interface
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;cols&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;vals&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{})&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rows&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Next&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;rowValue&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;([]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{},&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cols&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rows&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Scan&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;vals&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;cols&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#000&#34;&gt;rowValue&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rowValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;vals&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]).(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{}))&lt;/span&gt;
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

		&lt;span style=&#34;color:#000&#34;&gt;rowValues&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rowValues&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rowValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;strings&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Join&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cols&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rowValues&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rowValues&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;])&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// testcases
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// request에 있는걸로 / response 비교
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 매번 connnection (1분 1번)
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// TODO: Close!
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// Request -&amp;gt; user profile api
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.calhoun.io/using-postgresql-with-go/&#34;&gt;https://www.calhoun.io/using-postgresql-with-go/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;// 매번 connnection (1분 1번)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;json.compact&lt;/em&gt;
json을 비교하는데 똑같은 json이 자꾸 bytes.Compare 시에 다르다고 나와서 뭔가 했더니, 공백때문에 5개 byte가 더 길게 나왔다. 공백을 제거하기 위해 bytes.TrimSpace 이런거를 써도 JSON string 안에 공백이 있거나 하면 동작이 제대로 안된다. 오히려 데이터를 요상하게 만들 수 있으므로, JSON 내의 공백을 제거하거나 할때 json.Compact를 사용하도록 한다. buffer 를 만들고 해당 buffer에 공백을 제거할 json string을 넣는 방식으로 하면된다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;bytes&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;encoding/json&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;jsonb&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;`{
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;        &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    }`&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;buffer&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;bytes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Buffer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;json&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Compact&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;buffer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;jsonb&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
	
	&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;buffer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Buffer 을 만들때
new(Buffer) (or just declaring a Buffer variable) is sufficient to initialize a Buffer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;위의 예시에서처럼 new(bytes.Buffer)를 하던지,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;buffer&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;bytes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Buffer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이런식으로 생성한뒤 주소값을 넣어주면된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;buffer&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;bytes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Buffer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이런식으로 빈 값을 가르키는 포인터만 만들면 메모리 참조 panic이 날수있으니 조심해야한다.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: scripting in github action</title>
      <link>/blog/2019/11/22/scripting-in-github-action/</link>
      <pubDate>Fri, 22 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/11/22/scripting-in-github-action/</guid>
      <description>
        
        
        &lt;h1 id=&#34;github-action&#34;&gt;Github Action&lt;/h1&gt;
&lt;h2 id=&#34;cicd를-github-action-을-이용해서-구성해본다&#34;&gt;CI/CD를 Github Action 을 이용해서 구성해본다&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;set -e
bash script를 짤때, 명령줄 한줄 한줄 넘어갈때 에러가 발생하면 발생한 line에서 바로 종료될수 있도록 check할 수 있는 기능이다. script가 종료될때까지 기다릴필요 없이 에러발생시 바로 종료되므로, 디버그 시에 좋을것이다.&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: ssh tunneling</title>
      <link>/blog/2019/11/22/ssh-tunneling/</link>
      <pubDate>Fri, 22 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/11/22/ssh-tunneling/</guid>
      <description>
        
        
        &lt;h1 id=&#34;ssh-tunneling&#34;&gt;ssh tunneling&lt;/h1&gt;
&lt;p&gt;An SSH client connects to a Secure Shell server, which allows you to run terminal commands as if you were sitting in front of another computer. But an SSH client also allows you to “tunnel” a port between your local system and a remote SSH server.&lt;/p&gt;
&lt;p&gt;There are three different types of SSH tunneling, and they’re all used for different purposes. Each involves using an SSH server to redirect traffic from one network port to another. The traffic is sent over the encrypted SSH connection, so it can’t be monitored or modified in transit.&lt;/p&gt;
&lt;p&gt;You can do this with the ssh command included on Linux, macOS, and other UNIX-like operating systems. On Windows, which doesn’t include a built-in ssh command, we recommend the free tool PuTTY to connect to SSH servers. It supports SSH tunneling, too.&lt;/p&gt;
&lt;p&gt;SSH client 는 Secure Shell Server에 접속해서 마치 다른 컴퓨터 앞에 앉아서 커맨드를 입력하듯이 만들어준다. 하지만 SSH client는 local 시스템과 remote ssh server와의&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.howtogeek.com/168145/how-to-use-ssh-tunneling/&#34;&gt;https://www.howtogeek.com/168145/how-to-use-ssh-tunneling/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/serverlessguru/what-is-a-ssh-tunnel-aws-ec2-8ebc394b8208&#34;&gt;https://medium.com/serverlessguru/what-is-a-ssh-tunnel-aws-ec2-8ebc394b8208&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ssh -N -L 5432:&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;remote_rds_url&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;:5432 ec2-user@&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;host&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; -i &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;pem-key&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: aws-lambda</title>
      <link>/blog/2019/11/19/aws-lambda/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/11/19/aws-lambda/</guid>
      <description>
        
        
        &lt;p&gt;AWS lambda를 이용하여 serverless application을 생성할 수 있다. 다른말로, 백엔드 서버를 구축할 필요없이 핸들러 함수만 등록하면 Lambda가 해당 코드를 실행시켜주는 서비스이다. Trigger 시에만 코드를 실행하며 사용한 컴퓨팅 시간에 대해서만 요금을 지불할 수 있다. 다른 AWS 서비스와의 연동이 잘 되있고 이는 UI/cli 상으로 조정가능하다. 다만, Role, Network 설정을 잘 해주어야한다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/ko/lambda/&#34;&gt;참고&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;실습해보기 위해 간단하게 vpc내 rds instance에 접근해서 간단한 쿼리를 날리는 핸들러를 파이썬으로 작성했다.&lt;/p&gt;
&lt;p&gt;지원하는 언어별로 작업 방법이 다르고, 일단 Python을 기준으로 진행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;create_conn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;():&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#3465a4&#34;&gt;None&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;psycopg2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;connect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;conn_string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;psycopg2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DatabaseError&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;logger&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
            &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;ERROR: Unexpected error: Could not connect to Postgres instance.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;logger&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;exit&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;logger&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;SUCCESS: Connection to RDS MySQL instance succeeded&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;


&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fetch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;logger&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Now executing: {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;cursor&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cursor&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;cursor&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;query&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;raw&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;cursor&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;fetchall&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;line&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;raw&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;result&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;line&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;result&lt;/span&gt;


&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;lambda_handler&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;event&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;context&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;query_cmd&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;SELECT * FROM PG_TABLES LIMIT 5&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;logger&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;query_cmd&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;create_conn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;

    &lt;span style=&#34;color:#000&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fetch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;query_cmd&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;conn&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;

    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이때 Postgresql 에 접근하기 위한 드라이버로 psycopg2라는 외부 라이브러리를 import해주어야했기 때문에,
Lambda Runtime에 해당 라이브러리를 따로 첨부해주어야했다.&lt;/p&gt;
&lt;p&gt;따로 첨부해주기 위해서는 소스코드 + 라이브러리 를 한꺼번에 압축하여 업로드하는 방법이 있고, layers라는 걸 활용해서 lambda function들이 사용할 외부 라이브러리를 그때그때 매번 업로드하지 않고 layer만 추가해서 사용할 수 있도록 해놓은 것도 있었는데, 한꺼번에 업로드하는것은 동작을 확인했고, layers를 실습해보고자 하였다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/lambda-python-how-to-create-deployment-package.html&#34;&gt;한꺼번에 압축하는 법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Layers로 작업할때는 몇 가지만 주의하면 된다. 물론 이 몇가지 때문에 꽤 힘든 시간을 보내긴했다(ㅠㅠ)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Lambda의 cpu 기준으로 컴파일된 라이브러리를 포함할것 (ex. _psycopg.cpython-36m-x86_64-linux-gnu.so)
&lt;a href=&#34;https://github.com/jkehler/awslambda-psycopg2&#34;&gt;람다용으로 컴파일된 라이브러리 레포지토리&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;python 폴더 밑에 라이브러리 폴더를 두고 python 폴더를 압축하여 업로드할것.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;이 구조가 아니면 Lambda에서 import가 안된다!&lt;/em&gt;(이것때문에 시간오래걸림)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;library1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;library2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: docker-compose up</title>
      <link>/blog/2019/11/14/docker-compose-up/</link>
      <pubDate>Thu, 14 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/11/14/docker-compose-up/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.44bits.io/ko/post/almost-perfect-development-environment-with-docker-and-docker-compose#ports&#34;&gt;큰 참고가 된 게시물&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;개발환경-구성&#34;&gt;개발환경 구성&lt;/h1&gt;
&lt;p&gt;여러가지 다른 환경에 동일한 개발 환경을 구성할 수 있도록 하기 위해 Docker를 사용한다&lt;/p&gt;
&lt;h1 id=&#34;docker-compose-의-필요성&#34;&gt;docker-compose 의 필요성&lt;/h1&gt;
&lt;p&gt;Docker 로 개발환경을 구성할때 예를 들어 Web Application 과 Database 두 개의 서버를 띄워야한다고 하면,
일단 App을 하나의 컨테이너로 띄우고, Database를 또다른 컨테이너로 띄워서 둘이 통신할 수 있도록 해야한다.&lt;/p&gt;
&lt;p&gt;그런데 컨테이너와 다른 컨테이너가 통신할 수 있게 하려면 docker run 에서 몇가지 옵션이 더 들어가야한다.&lt;/p&gt;
&lt;p&gt;예시. Django application&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -it --rm &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -p 8000:8000 &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    django-sample &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    ./manage.py runserver 0:8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;django 에서 사용할 데이터베이스 설정을 담은 settings.py 파일&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;DATABASES&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.db.backends.postgresql&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;sampleDatabase&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;postgres&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;db&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;5432&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;postgres&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ex. Postgresql database&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run --rm &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    --name db &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -e &lt;span style=&#34;color:#000&#34;&gt;POSTGRES_DB&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;sampleDatabase &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -e &lt;span style=&#34;color:#000&#34;&gt;POSTGRES_USER&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;sampleuser &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -e &lt;span style=&#34;color:#000&#34;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;samplesecret &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;	--volume&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;pwd&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;/docker/data:/var/lib/postgresql/data &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    postgres
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;이렇게 환경변수를 설정해서 Postgresql 컨테이너를 실행시키면, default 값 대신 해당 값으로 초기화한다.
&lt;a href=&#34;https://hub.docker.com/_/postgres&#34;&gt;참고&lt;/a&gt;. 예를 들어 default database 대신에 djangosample 이라는 database를 create한다. POSTGRES_DB의 경우에 정의되지 않으면 USER와 같은 이름의 database가 만들어진다. &lt;em&gt;단, 서로 다른 container가 통신을 해야하는 상황에서는 password는 반드시 필요하므로 설정해주어야한다&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;단순하게 이렇게 구성해서는 두 컨테이너는 서로 통신할 수 없고,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;could not connect to server: Connection refused&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 에러만 발생할 것이다.&lt;/p&gt;
&lt;p&gt;이를 해결하기 위해선&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -it --rm &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -p 8000:8000 &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    --link db &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -e &lt;span style=&#34;color:#000&#34;&gt;DJANGO_DB_HOST&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;db &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    -e &lt;span style=&#34;color:#000&#34;&gt;DJANGO_DEBUG&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;True &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    django-sample &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;    ./manage.py runserver 0:8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이런식으로 &amp;ndash;link 옵션을 통해 db 컨테이너와 app 컨테이너를 연결해줘야한다.&lt;/p&gt;
&lt;p&gt;하지만, 이런식으로 하게 되면 조금 불편한 것이 사실이다. 이렇게 순차적으로 컨테이너를 실행시키는 것보단 한번 주루룩 설치하는 것이 아무래도 편할 것이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;게다가 link 옵션은 deprecate 예정이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이를 위해서 docker-compose를 이용할 수 있다. 이름에서 떠오르는 composer 와 비슷하게 컨테이너의 관리도구 같은 느낌이다.
docker-compose.yml 파일을 이용하여 컨테이너 실행에 필요한 옵션을 기술할 수 있고, 컨테이너간 실행 순서나 의존성도 관리할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;docker-composeyml&#34;&gt;docker-compose.yml&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;version: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;

services:
  db:
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: sampleDatabase
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
  web:
    build:
      context: .
      dockerfile: Dockerfile
    image: sampleApplication
    stdin_open: &lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt;
    tty: &lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt;
    command: &amp;gt;
      bash -c &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;python manage.py migrate --noinput 
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;      &amp;amp;&amp;amp; python manage.py createsu 
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;      &amp;amp;&amp;amp; python manage.py collectstatic --noinput 
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;      &amp;amp;&amp;amp; python manage.py runserver 0.0.0.0:8000&amp;#34;&lt;/span&gt;
    volumes:
      - .:/app
    ports:
      - &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;8000:8000&amp;#34;&lt;/span&gt;
    depends_on: &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# depend_on 옵션을 주면 순서를 조정가능하다 (db가 올라간 후에 web이 올라가도록)&lt;/span&gt;
      - db
    environment:
      DJANGO_SETTINGS_MODULE: sampleApplication.settings.default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위에 좀 복잡하게 했던걸 위와 같은 compose 파일을 작성하면 쉽게 동작시킬 수 있다.&lt;/p&gt;
&lt;p&gt;compose 에서는 link같은 것 필요없이도, 서비스 끼리 이름으로 &lt;strong&gt;통신가능&lt;/strong&gt;하다. 즉 위 예시에는 web에서 데이터베이스에 접근할때 단순히 다른 서비스인 db로 별다른 조치 없이 접근가능하다. Application 컨테이너가 뜰때 django의 settings.py에 database 설정의 host를 &amp;lsquo;db&amp;rsquo;로 해놓았기 때문에 이에 접근을 시도할 것이다. 예를 들어 settings.py 에 database host를 localhost라고 해놓았다면 접속이 안될것이다.&lt;/p&gt;
&lt;p&gt;db라는 이름이 마음에 들지 않는다면 또는 compose 내에 &amp;lsquo;links&amp;rsquo;라는 옵션을 통해 db 외에 다른 이름을 alias시켜줄 수도 있다. mydatabase라던지&amp;hellip;?&lt;/p&gt;
&lt;p&gt;첨에 좀 헤맸던건, 자꾸 데이터베이스가 없다느니, role 이 존재하지 않는다느니 하는 문제였는데,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker volumn prune
docker ps -a // 도커 컨테이너 모두 조회&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;stop된것도&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
rm -rf /var/lib/postgresql/data/

docker-compose down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;컨테이너를 모두 조회해서 모두 삭제하고 마운트된 볼륨도 모두 삭제한 후 다시해보니 정상적으로 잘 작동했다.&lt;/p&gt;
&lt;p&gt;기존 컨테이너와 뭔가가 충돌했던 모양이다.&lt;/p&gt;
&lt;p&gt;이제 실행시켜보면 된다. &amp;ndash;force-recreate옵션을 통해 무조건 컨테이너를 다시 만드는 옵션을 줄 수있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker-compose up --force-recreate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: rune ?</title>
      <link>/blog/2019/11/13/rune/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/11/13/rune/</guid>
      <description>
        
        
        &lt;p&gt;Go에서 String은 byte 들의 읽기전용 배열이라고 할 수 있다. 유니코드 표준은 값 하나에 의해 표현되는 항목에 대해 &amp;ldquo;코드포인트&amp;rdquo; 라는 용어를 사용한다. 16진수 2318값을 가진 코드 포인트 U+2318은 ⌘ 를 나타낸다. 좀 더 무난한 예제로, 유니코드 코드 포인트 U+0061은 소문자 &amp;lsquo;a&amp;rsquo;를 나타낸다.&lt;/p&gt;
&lt;p&gt;일반적으로 글자는 여러 개 코드포인트의 조합으로 나타낼 수 있고, 따라서 이를 utf-8 인코딩한 바이트 배열로 나타낼 수 있다. 코드 포인트는 살짝 길기 때문에, Go에서는 &lt;em&gt;rune&lt;/em&gt;이라는 용어를 사용한다. rune은 코드 포인트와 정확히 같은 개념이다. Go는 rune을 int32의 alias로 사용하여 프로그램이 이 integer 값이 특정 code point를 나타내는것이 명확하도록 하였다. 보통 character 상수라고 생각되는 것은 go 에서 rune 상수라고 불린다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lsquo;⌘&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 symbol의 타입과 값도 0x2318 integer 값을 가진 rune 타입이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;first test example:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;second test example:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;가&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;third test example:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
	&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// first test example: 3
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// second test example: 1
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// third test example: 3
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;string 타입의 변수 test가 있다고 했을때, 1 바이트로 표현할 수 있는 알파벳과 다르게 나머지 &lt;em&gt;글자&lt;/em&gt; 들은 len을 출력했을때
일반적으로 예상하는 그 길이가 출력되지 않는다. 이는 각 character(알파벳 이외의 문자)가 1바이트 이상의 바이트로 표현되고, 이에 len을 출력했을때 바이트수가 출력되기 때문이다.&lt;/p&gt;
&lt;p&gt;대신, 모든 글자(character)는 unicode의 특정 code point로 나타낼 수 있다. 이를 이용해서 한 글자당 한 rune 타입으로 바꿔서 string을 rune slice로 변환한다고 생각해보면, len을 출력했을때 원하는 출력을 얻을 수 있다. 즉, 아래와 같이 하면&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;runeTest&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;rune&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;rune test example:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;runeTest&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// rune test example: 1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;생각한 결과를 얻을 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/&#34;&gt;참고&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;update&#34;&gt;Update!!&lt;/h2&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;추가!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;utf8 라이브러리의 아래 함수를 이용하면 utf8로 인코딩된 문자열 값의 길이를 알수있다. 예를 들어 한글은 1글자당 3바이트를 이용해 저장하므로, 그냥 len을 이용해 출력하면 3이지만 RuneCountInString함수를 이용하면 실제길이인 1을 구할수있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;han&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;한&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;han&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 3
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;utf8&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;RuneCountInString&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;han&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://pyrasis.com/book/GoForTheReallyImpatient/Unit45/02&#34;&gt;utf8 패키지 내 함수 참고자료&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Django tutorial</title>
      <link>/blog/2019/11/11/django-tutorial/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/11/11/django-tutorial/</guid>
      <description>
        
        
        &lt;h1 id=&#34;django&#34;&gt;Django&lt;/h1&gt;
&lt;h2 id=&#34;setup&#34;&gt;setup&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;가상환경 생성&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python3 -m venv VenvDjango
&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; VenvDjango/ &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;source&lt;/span&gt; bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;프로젝트 디렉토리 파기&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir django-drf-react-quickstart &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$_&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;장고 &amp;amp; 장고 rest framework 깔기, 프로젝트 시작&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip install django djangorestframework
django-admin startproject project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;django-application-만들기&#34;&gt;Django Application 만들기&lt;/h2&gt;
&lt;p&gt;Django는 많은 Application&lt;em&gt;들&lt;/em&gt; 로 구성되있다. 각 application은 이상적으로는 &lt;em&gt;한&lt;/em&gt;가지 일만 해야한다. Django application 들은 모듈화되있고 재사용가능하다. Post를 작성하고 리스팅하는 application을 만들 수 있다. 다른 프로젝트가 같은 앱을 필요로하면 난 해당 앱을 패키지 매니저로 부터 설치하면된다.&lt;/p&gt;
&lt;p&gt;이전에 만든 startproject 를 통해 project라는 폴더가 생성되 있었을텐데, 해당 폴더에 들어가서&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;django-admin startapp app_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;아래 명령어로 application 을 생성해주도록 한다. 여기선 app_name을 leads라고 하겠다.&lt;/p&gt;
&lt;p&gt;그럼 프로젝트 구조는
django-drf-react-quickstart 아래&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;project
|&amp;mdash; leads
|&amp;mdash; project
|&amp;mdash; manage.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 구조가 된다. 이때 project/settings.py에&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;INSTALLED_APPS&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;leads&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 방금 생성한 app 을 추가한다&lt;/span&gt;
	&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이제 첫번째 모델을 추가해보자.&lt;/p&gt;
&lt;h2 id=&#34;django-model-만들기&#34;&gt;Django Model 만들기&lt;/h2&gt;
&lt;p&gt;첫번째 model을 만들 차례다. model은 테이블의 데이터를 표현하는 객체이다. 장고 뿐만 아니라 거의 모든 웹 프레임워크가 모델의 개념을 가지고 있다. 장고 모델은 1개 이상의 Field를 가지는데, Field는 테이블의 Column(열)을 의미한다.&lt;/p&gt;
&lt;p&gt;예시 모델은 3개의 Field를 가진다고 해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;email&lt;/li&gt;
&lt;li&gt;message&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Django는 자동으로 created_at column을 추가해주지 않으므로 누락하지 않도록 한다.&lt;/p&gt;
&lt;p&gt;leads/models.py를 열고 lead model을 작성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;django.db&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;models&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Lead&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Model&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;CharField&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;max_length&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;email&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;EmailField&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;CharField&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;max_length&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;300&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;created_at&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DateTimeField&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;auto_now_add&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#3465a4&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;cf. 모델 field에 대한 자세한 &lt;a href=&#34;https://docs.djangoproject.com/en/2.0/ref/models/fields/&#34;&gt;documentation&lt;/a&gt;
Use-case에 가장 적합한 필드를 고르도록한다.&lt;/p&gt;
&lt;p&gt;모델을 작성했으니, migration 을 만들어본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python manage.py makemigrations leads
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그리고 db에 migrate한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p&gt;테스팅을 위해 아래 패키지를 설치한다&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip install coverage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;coverage run --source&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; manage.py &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt;
// run converage
coverage html
// report 를 html 로 보고싶을때
coverage report
// &lt;span style=&#34;color:#204a87&#34;&gt;command&lt;/span&gt; line에서 보고 싶을때
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;project/htmlcov/index.html을 browser에서 열어보면 뭘 테스트해야하는지 알수있을 것이다.&lt;/p&gt;
&lt;h2 id=&#34;rest-serializer&#34;&gt;REST serializer&lt;/h2&gt;
&lt;p&gt;serialization은 객체를 어떤 데이터 포맷으로 변형시키는 것이다. 그렇게 하면 파일로 저장하거나 네트워크를 통해 보낼 수 있는 형태가 된다. Django에서도, 모델이 Python class이고 이를 브라우저에서 렌더링하기 위해 JSON으로 바꿔야하기 때문에 Django REST Serializer가 필요하다. 이는 JSON을 객체로 바꾸는 데에도 적용된다.&lt;/p&gt;
&lt;p&gt;./leads/serializer.py라는 파일을 만들고, 아래와 같이 작성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rest_framework&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;serializers&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;leads.models&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Lead&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;LeadSerializer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;serializers&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ModelSerializer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Meta&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;model&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Lead&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;fields&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;field를 한땀한땀 작성하지 않고,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;LeadSerializer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;serializers&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ModelSerializer&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Meta&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;model&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Lead&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;fields&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;__all__&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 작성할 수도 있다. 이제 Views/Urls를 살펴보자&lt;/p&gt;
&lt;h2 id=&#34;controller가아니고-views&#34;&gt;Controller가&amp;hellip;아니고 Views&lt;/h2&gt;
&lt;p&gt;다른 프레임워크를 쓰다보면, Django에 Controller가 없다는 게 꽤 놀랍다. 보통 컨트롤러는 Request를 처리하고 Response를 내보내는 로직을 포함한다. 전통적인 MVC 아키텍쳐에서는 Model, View, Controller 세 개가 존재한다. Rails등이 있다. Django는 MVT 프레임워크인데, Model, View, Template이다. View가 Response/Request 라이프사이클을 관리한다. Django에는 Function View, Class based view, generic view 같이 다양한 종류의 View가 존재한다.&lt;/p&gt;
&lt;p&gt;우리는 여기서 generic API views를 기준으로 실습을 진행한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모델의 collection을 조회하고,&lt;/li&gt;
&lt;li&gt;DB에 신규 객체들을 생성한다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;generics api 내에는 조회와 생성을 위한 view가 존재하는데, 아래와 같은 식으로 사용하면 된다
./leads/views.py 을 열고&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;leads.models&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Lead&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;leads.serializers&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;LeadSerializer&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rest_framework&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;generics&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;LeadListCreate&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;generics&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ListCreateAPIView&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;queryset&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Lead&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;all&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;serializer_class&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;LeadSerializer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3줄만 추가했는데, GET/POST request를 handling하는 view를 만들었다&lt;/p&gt;
&lt;h2 id=&#34;route가-아니고-urls&#34;&gt;Route..가 아니고 urls&lt;/h2&gt;
&lt;p&gt;Rails나 다른 프레임워크를 썼던 사람들은 Django에 Route 설정이 없다는 것에 꽤 놀랄 수 있다. View와 url을 mapping하는 가장 쉬운 방법은 url mapping이다.&lt;/p&gt;
&lt;p&gt;위에서 만들었던 LeadListCreate를 api/lead/와 묶어보자. 즉, 모델 조회와 생성시에 api/lead/로 GET/POST 요청을 날리고 싶다.
URL mapping을 설정하기 위해서는 ./project/urls.py 을 연다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;django.urls&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;include&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;urlpatterns&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;include&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;leads.urls&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그리고 ./leads/urls.py로 가서&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;django.urls&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;views&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;urlpatterns&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;api/lead/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;views&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LeadListCreate&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;as_view&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()),&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 작성해준다.&lt;/p&gt;
&lt;p&gt;마지막으로 설정의 INSTALLED_APPS 에서 아래와 같이 rest_framework를 추가해주면,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;INSTALLED_APPS&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;leads&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; 
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;rest_framework&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# enable rest framework&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://www.valentinog.com/blog/wp-content/uploads/2018/02/django-rest-framework-browsable-api.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;위 화면을 확인 가능하다.&lt;/p&gt;
&lt;h2 id=&#34;db-seeding&#34;&gt;DB seeding&lt;/h2&gt;
&lt;p&gt;Django fixture을 통해 DB에 데이터를 넣을 수 있다.
Fixture는 frontend 데이터를 가지고 데모할 때 유용하게 쓸수 있다.
./leads/fixtures 라는 폴더를 만들고 leads.json라는 파일을 아래와 같이 작성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;leads.lead&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;pk&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Armin&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;something@gmail.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;I am looking for a Javascript mentor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;created_at&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;2018-02-14 00:00:00&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;leads.lead&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;pk&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;tomsomething@gmail.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;I want to talk about a Python project&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;created_at&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;2018-01-14 00:00:00&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;저장한 후 fixture를 불러온다&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python manage.py loaddata leads
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;끝!&lt;/p&gt;
&lt;h2 id=&#34;react-frontend&#34;&gt;React Frontend&lt;/h2&gt;
&lt;p&gt;Django 와 React 를 어떻게 하면 잘 붙힐 수 있을까에 대해서는 여러가지 의견이 있다.&lt;/p&gt;
&lt;p&gt;결과적으로는 얼마나 많은 Javascript가 필요한지에 따라 다르다. 보통은 3가지 패턴이 존재한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;React를 Django의 &amp;ldquo;frontend&amp;rdquo; app으로 가져간다: single HTML 템플릿을 load하고 React가 frontend를 관리하게 한다&lt;/li&gt;
&lt;li&gt;Django를 독립적인 Rest API로 두고, React도 독립적인 SPA로 둔다 (인증을 위해 JWT가 필요하다)&lt;/li&gt;
&lt;li&gt;섞는다: 작은 React app 들을 Django 템플릿안에 넣는다&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1번으로 가는 경우:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;app같은 웹사이트를 만들때&lt;/li&gt;
&lt;li&gt;user interaction 이 많은 인터페이스일때&lt;/li&gt;
&lt;li&gt;SEO 걱정이 없을때&lt;/li&gt;
&lt;li&gt;react router가 괜찮을때&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;React를 Django에 가깝게 유지하는 것은 인증이나 다른 것들을 쉽게 해준다. Django 빌트인 인증을 이용해서 사용자들의 등록이나 로그인을 만들 수 있고, 빌트인 Session 인증을 통해 토큰이나 JWT을 걱정하지 않을 수 있다.&lt;/p&gt;
&lt;p&gt;3번으로 가는 경우:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;javascript 가 별로 필요없다&lt;/li&gt;
&lt;li&gt;SEO를 신경써야한다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;react-설정과-웹팩&#34;&gt;React 설정과 웹팩&lt;/h2&gt;
&lt;p&gt;1번으로 실습을 진행한다&lt;/p&gt;
&lt;p&gt;Django와 React 조합의 장점은 API를 제공하는 Django Rest Framework이다. React는 &amp;ldquo;frontend&amp;quot;라는 개별적 app 으로 만들 것이다.&lt;/p&gt;
&lt;p&gt;이전과 마찬가지로&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;django-admin startapp frontend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;로 app을 만들어준다.&lt;/p&gt;
&lt;p&gt;$HOME/django-drf-react-quickstart/project/ 밑에 frontend라는 디렉토리가 생겼을것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir -p ./frontend/src/components
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir -p ./frontend/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;static,templates&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/frontend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; ..
// &lt;span style=&#34;color:#000&#34;&gt;$HOME&lt;/span&gt;/django-drf-react-quickstart
npm init -y
// npm 환경 초기화
npm i webpack webpack-cli --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;webpack과 webpack-cli를 설치한 후 package.json에 scripts를 아래와 같이 설정한다&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dev&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;webpack --mode development ./project/frontend/src/index.js --output ./project/frontend/static/frontend/main.js&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;build&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;webpack --mode production ./project/frontend/src/index.js --output ./project/frontend/static/frontend/main.js&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그리고 코드 트랜스파일을 위해 babel을 설치한다&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;npm i @babel/core babel-loader @babel/preset-env @babel/preset-react babel-plugin-transform-class-properties --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;babel-plugin-transform-class-properties 는 ES6 클래스 static property를 사용하기 위해 필수적이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;npm i react react-dom prop-types --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;React와 prop-type도 설치한다&lt;/p&gt;
&lt;p&gt;프로젝트 폴더내에 .babelrc 라는 새로운 파일을 만들어 babel 을 설정해준다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;presets&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;@babel/preset-env&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;@babel/preset-react&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;,
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;plugins&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;
        &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;transform-class-properties&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;마지막으로 webpack.config.js라는 파일을 작성하여 babel-loader를 설정해준다&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;module.exports &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
  module: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
    rules: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;
      &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
        test: /&lt;span style=&#34;color:#4e9a06&#34;&gt;\.&lt;/span&gt;js$/,
        exclude: /node_modules/,
        use: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
          loader: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;babel-loader&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;셋팅 끝!&lt;/p&gt;
&lt;h2 id=&#34;react-frontend-1&#34;&gt;React Frontend&lt;/h2&gt;
&lt;p&gt;./frontend/views.py를 작성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;django.shortcuts&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;render&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;):&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;render&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;frontend/index.html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;./frontend/templates/frontend/index.html을 작성한다&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;html&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;head&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;width=device-width, initial-scale=1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/bulma/0.6.2/css/bulma.min.css&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;Django DRF - React : Quickstart - Valentino G. - www.valentinog.com&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;head&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;section&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;section&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;container&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;columns&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;!-- React --&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;section&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;html&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;마지막에서 frontend/main.js를 호출한다&lt;/p&gt;
&lt;p&gt;./project/urls.py를 열고&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;urlpatterns&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;include&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;leads.urls&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)),&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;include&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;frontend.urls&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)),&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;frontend.urls를 포함해준다&lt;/p&gt;
&lt;p&gt;./frontend/urls.py를 열고&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;django.urls&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;views&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;urlpatterns&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color:#000&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;views&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;),&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;view를 연결해준다.&lt;/p&gt;
&lt;p&gt;./project/settings.py를 열고 installed_app에 frontend를 추가해준다&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;INSTALLED_APPS&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;leads&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; 
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;rest_framework&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;frontend&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# enable the frontend app&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;지금 서버를 실행시켜보면&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;아무것도 안뜬다. React가 없기 떄문.&lt;/p&gt;
&lt;p&gt;React frontend를 만들기 위해서 3개의 컴포넌트가 필요한데,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mother Component인 App&lt;/li&gt;
&lt;li&gt;data fetching을 위한 stateful component인 Dataprovider&lt;/li&gt;
&lt;li&gt;데이터 display를 위한 stateless component 인 Table&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;app&#34;&gt;App&lt;/h3&gt;
&lt;div id=&#34;app&#34;&gt; &lt;/div&gt; 에 react를 붙히기 위한 메인 컴포넌트이다.
./frontend/src/components/App.js라는 파일을 만든다.
```python
import React from &#34;react&#34;;
import ReactDOM from &#34;react-dom&#34;;
import DataProvider from &#34;./DataProvider&#34;;
import Table from &#34;./Table&#34;;
const App = () =&gt; (
  &lt;DataProvider endpoint=&#34;api/lead/&#34; 
                render={data =&gt; &lt;Table data={data} /&gt;} /&gt;
);
const wrapper = document.getElementById(&#34;app&#34;);
wrapper ? ReactDOM.render(&lt;App /&gt;, wrapper) : null;
```

      </description>
    </item>
    
    <item>
      <title>Blog: reflect 어떻게 쓰지 - 2</title>
      <link>/blog/2019/11/07/reflect-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%93%B0%EC%A7%80-2/</link>
      <pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/11/07/reflect-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%93%B0%EC%A7%80-2/</guid>
      <description>
        
        
        &lt;p&gt;Reflect를 사용해서 좀 더 복잡한 로직을 수행하는 예제이다.
예를 들어 API 서버의 들어오는 Request와 나가는 Response 를 모두 서버에 로그로 남겨두는 경우,
해당 Request와 Response 의 특정 필드는 개인정보에 해당하므로 비식별화한 후 저장하도록 하게 하고싶다고 한다.
그리고 이때 Request 와 Response는 모두 JSON 으로 주고 받는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;앱로그&lt;/li&gt;
&lt;li&gt;트랜잭션로그&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;재사용 가능한 middleware/transaction.go&lt;/p&gt;
&lt;p&gt;개선사항&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;data 가 포인터이든, 값이든 대응 할 수 있도록 type 검사를 수행하고, map[string]string을 대신에 기존 data의 타입을 복사해서 새로운 변수를 만든다. reflect.New를 이용하여 파라미터로 넘어온 특정 타입의 변수를 만들수 있다. 단, 포인터로 만들어지므로 주의해서 쓰도록 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TypeOf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Ptr&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;buffdata&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;New&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TypeOf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Elem&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;buffdata&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;New&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TypeOf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;buffdata 라는 data와 같은 타입의 변수를 만들었으니 해당 변수에 copy한다. copier라는 라이브러리를 사용하였고 struct에서 struct로 복사할 수 있게 해주는 라이브러리이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;copier&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Copy&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;buffdata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Error&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Fail to copy data for response log&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;로그를 남기는 것은 async로 처리하여, 속도를 높힌다
ShouldBindJson는 Request를 특정 struct로 binding 하기 위해 사용하는 것인데, 이를 Wrapping하여 Request 로그를 남기는 로직을 추가한 것이므로, 뒤에 로직같은 경우엔 비동기로 처리하는 것이 좋다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;wg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(){&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;wg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Done&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;deidentify&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ValueOf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;buffdata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
	
	&lt;span style=&#34;color:#000&#34;&gt;headers&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;json&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Marshal&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Request&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Header&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;json&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Marshal&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;buffdata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	
	&lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Transaction&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TransactionLog&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LogTypeRequest&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;URL&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;     &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Request&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;URL&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(),&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;Method&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Request&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Method&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;Headers&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;headers&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;Body&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;    &lt;span style=&#34;color:#000&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}()&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;wg&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Wait&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;비식별화 로직 한 함수에 정리하여 비식별화 로직과 request/response 처리 로직 분리&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;=&amp;gt; 이전 비식별화 + request 처리 혼재 / 비식별화 + response 처리 혼재&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Parameter가 포인터이면 안되는 함수
=&amp;gt; 해당 value 종류가 reflect.Ptr / reflect.Interface 이면 Elem() 처리&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nested Struct JSON을 처리할때 DeepFields, DeepTag를 이용해서 Field와 Tag를 각각 모두 뽑아내어 처리하기
=&amp;gt; 비식별화 함수 로직 자체를 깔끔하게 해서 한 함수 내에서 처리&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Old&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;DeepFields&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iface&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{})&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Value&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;fields&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;([]&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;ifaceValue&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ValueOf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;ifaceType&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TypeOf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;iface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ifaceType&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NumField&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ifaceValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Field&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Struct&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
			&lt;span style=&#34;color:#000&#34;&gt;fields&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;fields&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;DeepFields&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
			&lt;span style=&#34;color:#000&#34;&gt;fields&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;fields&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;fields&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;NEW&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;deidentify&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Ptr&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Interface&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Elem&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Slice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Array&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;idx&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;idx&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;idx&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#000&#34;&gt;deidentify&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Index&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;idx&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Struct&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;idx&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;idx&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NumField&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;idx&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Field&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;idx&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Tag&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;deidentify&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
				&lt;span style=&#34;color:#000&#34;&gt;mask&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Field&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;idx&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
			&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
			&lt;span style=&#34;color:#000&#34;&gt;deidentify&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Field&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;idx&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;mask&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;values&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;rune&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;

		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;
		
		&lt;span style=&#34;color:#000&#34;&gt;masked&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;([]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;idx&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;masked&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#000&#34;&gt;masked&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;idx&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

		&lt;span style=&#34;color:#000&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SetString&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;strings&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Join&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;masked&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Rune을 쓰는 이유!&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: reflect 어떻게 쓰지 - 1</title>
      <link>/blog/2019/11/06/reflect-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%93%B0%EC%A7%80-1/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/11/06/reflect-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%93%B0%EC%A7%80-1/</guid>
      <description>
        
        
        &lt;p&gt;Reflect을 가장 먼저 접하게 된것은 작년이었는데 그때 당시엔 그냥 대충 써보다가 어려워서 기존에 사용했었던 코드들에서도 다 reflect를 빼버렸었다. 당장 급했는데 자꾸 뭐시기 뭐시기 나오네 이러고 별로 이해하려는 노력 없이 사용했었기 때문이었던 것같다.&lt;/p&gt;
&lt;p&gt;그러다 다시 go를 쓰게 되서 코딩을 하다가 또 reflect를 사용해야하는 경우를 발견했는데,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;sampleJSON&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;Num&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;`json:&amp;#34;NUM&amp;#34; joyful:&amp;#34;true&amp;#34;`&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;뭐 이런식으로 되어있다고 할때, json struct field의 tag를 받아오고 싶을 때 어떻게 할지를 찾아보다가 reflect를 사용하게 되면 쉽게 가능하다는 걸 알게 되었다.&lt;/p&gt;
&lt;p&gt;일단 잠시 reflect 맛을 보기 위해 예제를 수행해보자&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 예를 들어 sj라는 이름의 sample Json struct가 있다고 하자
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sj&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;sampleJSON&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;01000000000&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ValueOf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sj&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 1. reflect.ValueOf(interface) 해당 인터페이스의 reflect.Value값이 나온다
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 2. 거기서 Type()을 호출하면 해당 변수의 타입이 나온다. 여기선 sampleJSON
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// 3. 해당 타입의 Kind()를 조회해보면 구조체이므로 reflect.Struct이다
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ValueOf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sj&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Struct&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;say hello to struct&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;즉 reflect는 특정 interface 값의 Value를 조회할 수 있도록한다. 이 Value를 가지고 여러가지를 해볼 수 있는데 이는 추후에 하도록 하고, 일단 이 Value에 Type()을 조회하면 해당 변수의 값이 아닌 sampleJson 구조체 타입 자체의 정보를 다룰수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ValueOf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sj&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// main.sampleJSON
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TypeOf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sj&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// main.sampleJSON
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;또한 위 두 줄은 같은 역할을 수행하므로 밑에 TypeOf를 사용해도 무방하다.&lt;/p&gt;
&lt;p&gt;이제 Json tag를 본격적으로 찾아보려면,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;structTag&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TypeOf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sj&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Field&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Tag&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;structTag&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// json:&amp;#34;NUM&amp;#34; joyful:&amp;#34;true&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;structTag&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;joyful&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위와 같이 하면 되는데, tag는 reflect.StructField 에 저장되있는 속성이므로 TypeOf으로 타입을 조회한 후, Field(특정 필드를 선택)로 StructField 를 받아오면된다. 또한 특정 태그만 받아오고 싶을시 Get을 통해 특정태그만 받아올 수도 있다.&lt;/p&gt;
&lt;p&gt;주의할 점은 위에서 설명한건 reflect.ValueOf 또는 TypeOf의 파라미터로 들어온 interface타입이 값일때를 말한다는 것이다. 만약 포인터값일때는&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;reflect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;TypeOf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sj&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Elem&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Field&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Tag&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이런식으로 Elem()을 추가해주도록한다. 따라서 요기능을 넣는 함수들에는 해당 값이 값인지 포인터인지 판단하는 로직이 들어가야한다.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 언니가 사준 맥 립스틱 색깔</title>
      <link>/blog/2019/10/19/%EC%96%B8%EB%8B%88%EA%B0%80-%EC%82%AC%EC%A4%80-%EB%A7%A5-%EB%A6%BD%EC%8A%A4%ED%8B%B1-%EC%83%89%EA%B9%94/</link>
      <pubDate>Sat, 19 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/10/19/%EC%96%B8%EB%8B%88%EA%B0%80-%EC%82%AC%EC%A4%80-%EB%A7%A5-%EB%A6%BD%EC%8A%A4%ED%8B%B1-%EC%83%89%EA%B9%94/</guid>
      <description>
        
        
        &lt;p&gt;MAC&lt;/p&gt;
&lt;p&gt;&amp;ldquo;LUSTRE LIPSTICK ROUGE A LEVRE&amp;rdquo;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: How to study GOlang</title>
      <link>/blog/2019/10/16/how-to-study-golang/</link>
      <pubDate>Wed, 16 Oct 2019 12:22:22 +0900</pubDate>
      
      <guid>/blog/2019/10/16/how-to-study-golang/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://golangexample.com/&#34;&gt;https://golangexample.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://levelup.gitconnected.com/crud-restful-api-with-go-gorm-jwt-postgres-mysql-and-testing-460a85ab7121&#34;&gt;https://levelup.gitconnected.com/crud-restful-api-with-go-gorm-jwt-postgres-mysql-and-testing-460a85ab7121&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 리뷰해보고 싶은 Gin Boilerplate</title>
      <link>/blog/2019/10/16/%EB%A6%AC%EB%B7%B0%ED%95%B4%EB%B3%B4%EA%B3%A0-%EC%8B%B6%EC%9D%80-gin-boilerplate/</link>
      <pubDate>Wed, 16 Oct 2019 11:22:22 +0900</pubDate>
      
      <guid>/blog/2019/10/16/%EB%A6%AC%EB%B7%B0%ED%95%B4%EB%B3%B4%EA%B3%A0-%EC%8B%B6%EC%9D%80-gin-boilerplate/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://github.com/yakuter/ugin&#34;&gt;https://github.com/yakuter/ugin&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Dataproc</title>
      <link>/blog/2019/10/15/dataproc/</link>
      <pubDate>Tue, 15 Oct 2019 11:22:22 +0900</pubDate>
      
      <guid>/blog/2019/10/15/dataproc/</guid>
      <description>
        
        
        &lt;p&gt;Dataproc&lt;/p&gt;
&lt;p&gt;Overview&lt;/p&gt;
&lt;p&gt;Cloud Dataproc은 spark이나 하둡 클러스터를 더 쉽고 효율적으로 운영하기 위한 빠르고, 쓰기 쉬운, 완전 관리형 클라우드 서비스이다. 몇 시간이나 며칠 걸리는 운영 작업 대신에 Cloud Dataproc을 만들어서, 데이터 파이프라인을 위한 클러스터 증설등의 걱정을 없앨 수 있습니다.
이 실험은 GCP 콘솔을 이용해서 구글 클라우드 Dataproc cluster를 만들고, 해당 클러스터에서 간단한 아파치 스팤 잡을 수행하고, 클러스터 내에서 워커의 수를 수정하는 예제입니다.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Dataproc</title>
      <link>/blog/2019/10/15/dataproc/</link>
      <pubDate>Tue, 15 Oct 2019 11:22:22 +0900</pubDate>
      
      <guid>/blog/2019/10/15/dataproc/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://google.qwiklabs.com/focuses/672?parent=catalog&#34;&gt;https://google.qwiklabs.com/focuses/672?parent=catalog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Introduction
Cloud Dataproc is a managed Spark and Hadoop service that lets you take advantage of open source data tools for batch processing, querying, streaming, and machine learning. Cloud Dataproc automation helps you create clusters quickly, manage them easily, and save money by turning clusters off when you don&amp;rsquo;t need them. With less time and money spent on administration, you can focus on your jobs and your data.&lt;/p&gt;
&lt;p&gt;Consider using Cloud Dataproc to scale out compute-intensive jobs that meet these characteristics:&lt;/p&gt;
&lt;p&gt;The job is &lt;strong&gt;embarrassingly parallel&lt;/strong&gt;—in other words, you can process different subsets of the data on different machines.
You already have Apache Spark code that does the computation or you are familiar with Apache Spark.
The distribution of the work is pretty uniform across your data subsets.
If different subsets require different amounts of processing (or if you don&amp;rsquo;t already know Apache Spark), Apache Beam on Cloud Dataflow is a compelling alternative because it provides autoscaling data pipelines.&lt;/p&gt;
&lt;p&gt;In this lab, the job that you will run outlines the faces in the image using a set of image processing rules specified in OpenCV. The Vision API is a better way to do this, since these sort of hand-coded rules don&amp;rsquo;t work all that well, but this lab is an example of doing a compute-intensive job in a distributed way.&lt;/p&gt;
&lt;p&gt;Setup&lt;/p&gt;
&lt;p&gt;Install Software
Now we&amp;rsquo;ll set up the software to run the job. Using sbt, an open source build tool, you&amp;rsquo;ll build the JAR for the job you&amp;rsquo;ll submit to the Cloud Dataproc cluster. This JAR will contain the program and the required packages necessary to run the job. The job will detect faces in a set of image files stored in a Google Cloud Storage (GCS) bucket, and write out image files with the faces outlined, to either the same or to another Cloud Storage bucket.&lt;/p&gt;
&lt;p&gt;Create a Cloud Dataproc cluster
Step 1
Run the following commands in the SSH window to name your cluster and to set the MYCLUSTER variable. You&amp;rsquo;ll be using the variable in commands to refer to your cluster:&lt;/p&gt;
&lt;p&gt;MYCLUSTER=&amp;quot;${USER/_/-}-qwiklab&amp;quot;
echo MYCLUSTER=${MYCLUSTER}
Step 2
Set a default GCE zone to use (preferably the one you used for your development machine) and create a new cluster:&lt;/p&gt;
&lt;p&gt;gcloud config set compute/zone us-central1-a
gcloud dataproc clusters create ${MYCLUSTER} &amp;ndash;worker-machine-type=n1-standard-2 &amp;ndash;master-machine-type=n1-standard-2
This might take a couple minutes. The default cluster settings, which include two worker nodes, should be sufficient for this lab. n1-standard-2 is specified as both the worker and master machine type to reduce the overall number of cores used by the cluster.&lt;/p&gt;
&lt;p&gt;See the Cloud SDK gcloud dataproc clusters create command for information on using command line flags to customize cluster settings.
Submit your job to Cloud Dataproc
In this lab the program you&amp;rsquo;re running is used as a face detector, so the inputted haar classifier must describe a face. A haar classifier is an XML file that is used to describe features that the program will detect. You will download the haar classifier file and include its GCS path in the first argument when you submit your job to your Cloud Dataproc cluster.&lt;/p&gt;
&lt;p&gt;Step 1
Run the following command in the SSH window to load the face detection configuration file into your bucket:&lt;/p&gt;
&lt;p&gt;curl &lt;a href=&#34;https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalface_default.xml&#34;&gt;https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalface_default.xml&lt;/a&gt; | gsutil cp - gs://${MYBUCKET}/haarcascade_frontalface_default.xml
Step 2
Use the set of images you uploaded into the imgs directory in your GCS bucket as input to your Feature Detector. You must include the path to that directory as the second argument of your job-submission command.&lt;/p&gt;
&lt;p&gt;Submit your job to Cloud Dataproc:&lt;/p&gt;
&lt;p&gt;cd ~/cloud-dataproc/codelabs/opencv-haarcascade
gcloud dataproc jobs submit spark&lt;br&gt;
&amp;ndash;cluster ${MYCLUSTER}&lt;br&gt;
&amp;ndash;jar target/scala-2.10/feature_detector-assembly-1.0.jar &amp;ndash;&lt;br&gt;
gs://${MYBUCKET}/haarcascade_frontalface_default.xml&lt;br&gt;
gs://${MYBUCKET}/imgs/&lt;br&gt;
gs://${MYBUCKET}/out/
You can add any other images to use to the GCS bucket specified in the second argument.&lt;/p&gt;
&lt;p&gt;Step 3
Monitor the job, in the Console go to Navigation menu &amp;gt; Dataproc &amp;gt; Jobs. Move on to the next step when you get a similar output:&lt;/p&gt;
&lt;p&gt;job-complete.png&lt;/p&gt;
&lt;p&gt;Step 4
When the job is complete, go to Navigation menu &amp;gt; Storage and find the bucket you created (it will have your username followed by student-image followed by a random number) and click on it. Then click on an image in the Out directory. The image will download to your computer.&lt;/p&gt;
&lt;p&gt;How accurate is the face detection? The Vision API is a better way to do this, since this sort of hand-coded rules don&amp;rsquo;t work all that well. You can see how it works next.&lt;/p&gt;
&lt;p&gt;Step 5 (Optional)
Go back to the imgs folder and click on the other images you uploaded to your bucket. This will download the three sample images. Save them to your computer.&lt;/p&gt;
&lt;p&gt;Navigate to the Vision API page, scroll down to the Try the API section and upload the images you downloaded from your bucket. You&amp;rsquo;ll see the results of the image detection in seconds. The underlying machine learning models keep improving, so your results may not be the same:&lt;/p&gt;
&lt;p&gt;result1.png result2.png result3.png&lt;/p&gt;
&lt;p&gt;Step 6 (Optional)
If you want to experiment with improving the Feature Detector, you can make edits to the FeatureDetector code, then rerun sbt assembly and the gcloud dataproc and jobs submit commands.&lt;/p&gt;
&lt;p&gt;Congratulations!
You learned how to spin up a Cloud Dataproc cluster and run jobs!&lt;/p&gt;
&lt;p&gt;Data_Science_125_2.png&lt;/p&gt;
&lt;p&gt;Finish Your Quest
This self-paced lab is part of the Qwiklabs Quest Scientific Data Processing. A Quest is a series of related labs that form a learning path. Completing this Quest earns you the badge above, to recognize your achievement. You can make your badge (or badges) public and link to them in your online resume or social media account. Enroll in this Quest and get immediate completion credit if you&amp;rsquo;ve taken this lab. See other available Qwiklabs Quests.&lt;/p&gt;
&lt;p&gt;Take Your Next Lab
Continue your Quest with Distributed Computation of NDVI from Landsat Images using Cloud Dataflow, or try one of these:&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: VPC and NAT</title>
      <link>/blog/2019/10/15/vpc-and-nat/</link>
      <pubDate>Tue, 15 Oct 2019 11:22:22 +0900</pubDate>
      
      <guid>/blog/2019/10/15/vpc-and-nat/</guid>
      <description>
        
        
        &lt;p&gt;Data ingestion from server&lt;/p&gt;
&lt;p&gt;Stackdriver&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;로깅&lt;/li&gt;
&lt;li&gt;모니터링&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vs elastic search (+kibana)&lt;/p&gt;
&lt;p&gt;비용절감.&lt;/p&gt;
&lt;p&gt;워크샵에서는 qwiklab이라는 시스템을 이용해서 실습을 진행한다. 실습용 profile을 받고, 해당 profile의 cloud console에 접속하여 진행하기 때문에 해당 실습이 종료되면 profile 삭제등으로 크레딧이 청구될 일이 없다는 장점이 있다. 실제로 다른 워크샵에서는 리소스를 깨끗히 정리하지 못해서 비용이 청구되는 일이 굉장히 많은데, 이 부분을 깔끔히 해결했다.&lt;/p&gt;
&lt;p&gt;이 예제에서는 쿠버네티스 엔진 클러스터를 만들고, 간단한 샘플 어플리케이션을 배포한다. 기본적으로 GCP의 쿠버네티스 엔진 클러스터는 Terraform 을 이용해서 일단 application을 Kubernetes cluster에 배포한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Terraform이란 무엇?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테라폼은 오픈소스 인프라 스트럭처 관리 도구이다. Chef나 Ansible과 같은 Provisoning
세 가지의 terraform 파일을 사용하는데, main.tf, provider.tf, variables.tf 이다. Terraform은 특정 디렉토리의 모든 tf 확장자 파일을 읽어들여 리소스 생성/수정/삭제를 진행하므로,
어떤식으로 tf 파일을 작성할지에 대해서 제한은 없지만, 이 튜토리얼에서는 3개로 나눠서 진행하였다. 먼저, provider.tf는 이름에서도 알수 있듯이,&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;For instance, Terraform can build out GCP projects and compute instances, etc., even set up a Kubernetes Engine cluster and deploy applications to it. When requirements change, the descriptor can be updated and Terraform will adjust the cloud infrastructure accordingly.
예를 들어, 테라폼은&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Deployment
Following the principles of Infrastructure as Code and Immutable Infrastructure, Terraform supports the writing of declarative descriptions of the desired state of infrastructure. When the descriptor is applied, Terraform uses GCP APIs to provision and update resources to match. Terraform compares the desired state with the current state so incremental changes can be made without deleting everything and starting over. For instance, Terraform can build out GCP projects and compute instances, etc., even set up a Kubernetes Engine cluster and deploy applications to it. When requirements change, the descriptor can be updated and Terraform will adjust the cloud infrastructure accordingly.&lt;/p&gt;
&lt;p&gt;This example will start up a Kubernetes Engine cluster and deploy a simple sample application to it. By default, Kubernetes Engine clusters in GCP are provisioned with a pre-configured Fluentd-based collector that forwards logs to Stackdriver. Interacting with the sample app will produce logs that are visible in the Stackdriver Logging and other log event sinks.&lt;/p&gt;
&lt;p&gt;Update the provider.tf file
Remove the provider version for the Terraform from the provider.tf script file.&lt;/p&gt;
&lt;p&gt;Edit the provider.tf script file.&lt;/p&gt;
&lt;p&gt;nano ~/gke-logging-sinks-demo/terraform/provider.tf&lt;/p&gt;
&lt;p&gt;If the file contains static version string for the google provider as given below then remove it.&lt;/p&gt;
&lt;p&gt;&amp;hellip;.
provider &amp;ldquo;google&amp;rdquo; {
project = var.project
version = &amp;ldquo;~&amp;gt; 2.10.0&amp;rdquo;
}&lt;/p&gt;
&lt;p&gt;After modification your provider.tf script file should look like:&lt;/p&gt;
&lt;p&gt;&amp;hellip;
provider &amp;ldquo;google&amp;rdquo; {
project = var.project
}&lt;/p&gt;
&lt;p&gt;Save the file.&lt;/p&gt;
&lt;p&gt;Deploying the cluster
There are three Terraform files provided with this lab example. The first one, main.tf, is the starting point for Terraform. It describes the features that will be used, the resources that will be manipulated, and the outputs that will result. The second file is provider.tf, which indicates which cloud provider and version will be the target of the Terraform commands&amp;ndash;in this case GCP.&lt;/p&gt;
&lt;p&gt;The final file is variables.tf, which contains a list of variables that are used as inputs into Terraform. Any variables referenced in the main.tf that do not have defaults configured in variables.tf will result in prompts to the user at runtime.&lt;/p&gt;
&lt;p&gt;To build out the environment you can execute the following make command:&lt;/p&gt;
&lt;p&gt;make create&lt;/p&gt;
&lt;p&gt;Note: If you get deprecation warnings related to the zone varibale, please ignore it and move forward in the lab.
Test Completed Task
Click Check my progress to verify your performed task. If you have successfully deployed necessary infrastructure with Terraform, you will see an assessment score.&lt;/p&gt;
&lt;p&gt;Use Terraform to set up the necessary infrastructure
Validation
If no errors are displayed during deployment, after a few minutes you should see your Kubernetes Engine cluster in the GCP Console.&lt;/p&gt;
&lt;p&gt;Go to Navigation menu &amp;gt; Kubernetes Engine &amp;gt; Clusters to see the cluster with the sample application deployed.&lt;/p&gt;
&lt;p&gt;To validate that the demo deployed correctly, run:&lt;/p&gt;
&lt;p&gt;make validate&lt;/p&gt;
&lt;p&gt;Your output will look like this:&lt;/p&gt;
&lt;p&gt;make_valid.png&lt;/p&gt;
&lt;p&gt;Now that the application is deployed to Kubernetes Engine you can generate log data and use Stackdriver and other tools to view it.&lt;/p&gt;
&lt;p&gt;어플리케이션은 쿠버네티스 엔진 위에 배포되기 때문에 로그 데이터를 생성하고 스택드라이버나 다른 툴을 사용해서 조회할 수 있다.&lt;/p&gt;
&lt;p&gt;콘솔에서 Networking section -&amp;gt; Network services로 가면 기본 TCP LB 가 셋업되있다. LB 상세보기를 선택하면 Frontend라고 써있고 IP 주소가 나와있다. 해당 주소를 복사해서 브라우저에 붙여넣어보면, 아까 테라폼으로 띄웠던 샘플 어플리케이션이 나온다. 브라우저에서 어플리케이션을 열때마다, Stackdriver logging에 로그 이벤트 들을 publish한다. 몇번 리프레쉬를 해줘서, 로그를 조금 쌓아주도록 하자.&lt;/p&gt;
&lt;p&gt;Logs in Stackdriver
Stackdriver provides a UI for viewing log events. Basic search and filtering features are provided, which can be useful when debugging system issues. The Stackdriver Logging is best suited to exploring more recent log events. Users requiring longer-term storage of log events should consider some of the tools you&amp;rsquo;ll explore in the following sections.&lt;/p&gt;
&lt;p&gt;To access the Stackdriver Logging console perform the following steps:&lt;/p&gt;
&lt;p&gt;In the GCP Console, from the Navigation menu, in the Stackdriver section, click on Logging.
On this page change the Audited Resource filter to Kubernetes Container &amp;gt; stackdriver-logging &amp;gt; default. stackdriver-logging is the cluster; and default is the namespace).
Stack_clustername_default.png&lt;/p&gt;
&lt;p&gt;On this screen, you can expand the bulleted log items to view more details about a log entry.
Stackdriver_GKE_error-log.png&lt;/p&gt;
&lt;p&gt;On the logging console, you can perform any type of text search, or try out the various filters by log type, log level, timeframe, etc.&lt;/p&gt;
&lt;p&gt;Viewing Log Exports
The Terraform configuration built out two Log Export Sinks. To view the sinks perform the following steps:&lt;/p&gt;
&lt;p&gt;you should still be on the Stackdriver -&amp;gt; Logging page.&lt;/p&gt;
&lt;p&gt;In the left navigation menu, click on the Exports menu option.&lt;/p&gt;
&lt;p&gt;This will bring you to the Exports page. You should see two Sinks in the list of log exports.&lt;/p&gt;
&lt;p&gt;You can edit/view these sinks by clicking on the context menu (three dots) to the right of a sink and selecting the Edit sink option.&lt;/p&gt;
&lt;p&gt;Additionally, you could create additional custom export sinks by clicking on the Create Export option in the top of the navigation window.&lt;/p&gt;
&lt;p&gt;Logs in Cloud Storage
Log events can be stored in Cloud Storage, an object storage system suitable for archiving data. Policies can be configured for Cloud Storage buckets that, for instance, allow aging data to expire and be deleted while more recent data can be stored with a variety of storage classes affecting price and availability.&lt;/p&gt;
&lt;p&gt;The Terraform configuration created a Cloud Storage Bucket named stackdriver-gke-logging- to which logs will be exported for medium to long-term archival. In this example, the Storage Class for the bucket is defined as Nearline because the logs should be infrequently accessed in a normal production environment (this will help to manage the costs of medium-term storage). In a production scenario, this bucket may also include a lifecycle policy that moves the content to Coldline storage for cheaper long-term storage of logs.&lt;/p&gt;
&lt;p&gt;To access the Stackdriver logs in Cloud Storage perform the following steps:&lt;/p&gt;
&lt;p&gt;In the GCP Console from the Navigation menu click Storage.
Find the Bucket with the name stackdriver-gke-logging-&lt;random-Id&gt;, and click on the name.
You should see a list of directories corresponding to pods running in the cluster (e.g. autoscaler, dnsmasq, etc.).
Cloud Storage Bucket&lt;/p&gt;
&lt;p&gt;You can click into any of the folders to browse specific log details like heapster, kubedns, sidecar, etc.&lt;/p&gt;
&lt;p&gt;Logs in BigQuery
Stackdriver log events can be configured to be published to BigQuery, a data warehouse tool that supports fast, sophisticated, querying over large data sets.&lt;/p&gt;
&lt;p&gt;The Terraform configuration will create a BigQuery DataSet named gke_logs_dataset. This dataset will be setup to include all Kubernetes Engine related logs for the last hour (by setting a Default Table Expiration for the dataset). A Stackdriver Export will be created that pushes Kubernetes Engine container logs to the dataset.&lt;/p&gt;
&lt;p&gt;To access the Stackdriver logs in BigQuery, perform the following steps:&lt;/p&gt;
&lt;p&gt;Note: The BigQuery Export is not populated immediately. It may take a few moments for logs to appear.&lt;/p&gt;
&lt;p&gt;On the GCP console from Navigation menu, in the Big Data section, click on BigQuery.
In the left menu, click on your project name. You should see a dataset named gke_logs_dataset. Expand this dataset to view the tables that exist (Note: The dataset is created immediately, but the tables are what is generated as logs are written and new tables are needed).
Click on one of the tables to view the table details.
Review the schema of the table to note the column names and their data types. This information can be used in the next step when you query the table to look at the data.
BQ_logs_dataset.png&lt;/p&gt;
&lt;p&gt;Click on Query Table towards the top right to perform a custom query against the table.
This adds a query to the Query Editor, but it has a syntax error.
Edit the query to add an asterisk (*) after Select to pull in all details from the current table. Note: A Select * query is generally very expensive and not advised. For this lab the dataset is limited to only the last hour of logs, so the overall dataset is relatively small.
Click Run to execute the query and return some results from the table.
The results window should display some rows and columns. You can scroll through the various rows of data that are returned. If you want, execute some custom queries that filter for specific data based on the results that were shown in the original query.&lt;/p&gt;
&lt;p&gt;Test Completed Task
Click Check my progress to verify your performed task. If BigQuery sink written logs in BigQuery dataset, you will see an assessment score.&lt;/p&gt;
&lt;p&gt;View Logs in BigQuery
Teardown
Qwiklabs will take care of shutting down all the resources used for this lab, but here’s what you would need to do to clean up your own environment to save on cost and to be a good cloud citizen:&lt;/p&gt;
&lt;p&gt;make teardown&lt;/p&gt;
&lt;p&gt;Since Terraform tracks the resources it created it is able to tear them all down.&lt;/p&gt;
&lt;p&gt;Troubleshooting for your production environment
The install script fails with a Permission denied when running Terraform.
The credentials that Terraform is using do not provide the necessary permissions to create resources in the selected projects. Ensure that the account listed in gcloud config list has necessary permissions to create resources. If it does, regenerate the application default credentials using gcloud auth application-default login.&lt;/p&gt;
&lt;p&gt;Cloud Storage Bucket not populated
Once the Terraform configuration is complete the Cloud Storage Bucket will be created, but it is not always populated immediately with log data from the Kubernetes Engine cluster. Give the process some time because it can take up to 2 to 3 hours before the first entries start appearing (&lt;a href=&#34;https://cloud.google.com/logging/docs/export/using_exported_logs)&#34;&gt;https://cloud.google.com/logging/docs/export/using_exported_logs)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;No tables created in the BigQuery dataset
Once the Terraform configuration is complete the BigQuery Dataset will be created but it will not always have tables created in it by the time you go to review the results. The tables are rarely populated immediately. Give the process some time (minimum of 5 minutes) before determining that something is not working properly.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bigquery dataset에 테이블이 존재하지 않을때&lt;/em&gt;
테라폼 설정이 완료되어&lt;/p&gt;
&lt;p&gt;Congratulations
Enterprise-Customers.png stackdriver-logging-badge.png&lt;/p&gt;
&lt;p&gt;Finish Your Quest
This self-paced lab is part of the Qwiklabs Google Kubernetes Engine Best Practices and Stackdriver Logging Quests. A Quest is a series of related labs that form a learning path. Completing a Quest earns you a badge to recognize your achievement. You can make your badge (or badges) public and link to them in your online resume or social media account. Enroll in either Quest and get immediate completion credit if you&amp;rsquo;ve taken this lab. See other available Qwiklabs Quests.&lt;/p&gt;
&lt;p&gt;Next Steps / Learn More
Kubernetes Engine Logging
Viewing Logs
Advanced Logs Filters
Overview of Logs Exports
Procesing Logs at Scale Using Cloud Dataflow
Terraform Google Cloud Provider
Google Cloud Training &amp;amp; Certification
&amp;hellip;helps you make the most of Google Cloud technologies. Our classes include technical skills and best practices to help you get up to speed quickly and continue your learning journey. We offer fundamental to advanced level training, with on-demand, live, and virtual options to suit your busy schedule. Certifications help you validate and prove your skill and expertise in Google Cloud technologies.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: golang slice</title>
      <link>/blog/2019/10/10/golang-slice/</link>
      <pubDate>Thu, 10 Oct 2019 14:22:22 +0900</pubDate>
      
      <guid>/blog/2019/10/10/golang-slice/</guid>
      <description>
        
        
        &lt;p&gt;slice에서&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;bSlice&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;aSlice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;getSlice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// getSlice에서는 slice를 make하고 return한다
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;bSlice&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;aSlice&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 하면 bSlice와 aSlice는 같은 Slice를 보고 있게 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;bSlice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;first&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;aSlice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;])&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// first
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;즉, 두 개의 slice 포인터가 내부적으로는 같은 slice를 바라보게 되는것이다.
주의해서 사용해야하지만, 메모리를 약간이라도 아낄수있다. 메모리 할당을 두번할걸 한번으로 줄였기 때문이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;IntersectionString&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;left&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;right&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;];&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#000&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;res&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;res&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이는 두 []string slice의 교집합을 찾는 함수이다. 일단 bool 타입을 값을 가지는 map으로 만든후, 왼쪽 slice의 값을 모두 key로 만든후 value에 true를 대입한다.&lt;/p&gt;
&lt;p&gt;아래는 해당 교집합 함수를 각각 O(n^2)와 O(n)의 시간복잡도를 가지는 두 테스트 함수로 시간을 비교하는 테스트 함수이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;TestIntersectionSpeed&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;testing&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;10000000&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;

	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;300000&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;rand&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Intn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;100000&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#000&#34;&gt;boolMap&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

	&lt;span style=&#34;color:#000&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Run&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;test double loop&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;testing&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;commonId&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;valA&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
				&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;valA&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
					&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;commonId&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
				&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
			&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
	
	&lt;span style=&#34;color:#000&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Run&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;test single loop&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;testing&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#000&#34;&gt;boolMap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;commonId&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;
		&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
			&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;boolMap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;];&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
				&lt;span style=&#34;color:#000&#34;&gt;commonId&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;commonId&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;val&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
			&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
		&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;하지만 놀랍게도,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;=== RUN   Test
--- PASS: Test (0.27s)
=== RUN   Test/test_double_loop
    --- PASS: Test2/test_double_loop (0.01s)
=== RUN   Test/test_single_loop
    --- PASS: Test2/test_single_loop (0.02s)
	PASS
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;밑에 꺼가 더 오래걸리게 나온다.&lt;/p&gt;
&lt;p&gt;Slice는 참조시에 메모리가 붙어서 더 빠르게 가능하다는 이야기를 하는데, 아래 글을 참조해야한다고 한다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://jacking75.github.io/go_PerformanceTuning/&#34;&gt;https://jacking75.github.io/go_PerformanceTuning/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/swlh/golang-tips-why-pointers-to-slices-are-useful-and-how-ignoring-them-can-lead-to-tricky-bugs-cac90f72e77b&#34;&gt;https://medium.com/swlh/golang-tips-why-pointers-to-slices-are-useful-and-how-ignoring-them-can-lead-to-tricky-bugs-cac90f72e77b&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: VPC and NAT</title>
      <link>/blog/2019/10/07/vpc-and-nat/</link>
      <pubDate>Mon, 07 Oct 2019 11:22:22 +0900</pubDate>
      
      <guid>/blog/2019/10/07/vpc-and-nat/</guid>
      <description>
        
        
        &lt;h1 id=&#34;ultimate-setup-for-your-next-golang-project&#34;&gt;Ultimate Setup for Your Next Golang Project&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://towardsdatascience.com/ultimate-setup-for-your-next-golang-project-1cc989ad2a96&#34;&gt;https://towardsdatascience.com/ultimate-setup-for-your-next-golang-project-1cc989ad2a96&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Http connection reusing in Go</title>
      <link>/blog/2019/09/30/http-connection-reusing-in-go/</link>
      <pubDate>Mon, 30 Sep 2019 11:22:22 +0900</pubDate>
      
      <guid>/blog/2019/09/30/http-connection-reusing-in-go/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/17948827/reusing-http-connections-in-golang&#34;&gt;https://stackoverflow.com/questions/17948827/reusing-http-connections-in-golang&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: VPC and NAT</title>
      <link>/blog/2019/09/30/vpc-and-nat/</link>
      <pubDate>Mon, 30 Sep 2019 11:22:22 +0900</pubDate>
      
      <guid>/blog/2019/09/30/vpc-and-nat/</guid>
      <description>
        
        
        &lt;p&gt;VPC:
&lt;a href=&#34;https://medium.com/harrythegreat/aws-%EA%B0%80%EC%9E%A5%EC%89%BD%EA%B2%8C-vpc-%EA%B0%9C%EB%85%90%EC%9E%A1%EA%B8%B0-71eef95a7098&#34;&gt;https://medium.com/harrythegreat/aws-%EA%B0%80%EC%9E%A5%EC%89%BD%EA%B2%8C-vpc-%EA%B0%9C%EB%85%90%EC%9E%A1%EA%B8%B0-71eef95a7098&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;vpc의-기본-컴포넌트들&#34;&gt;VPC의 기본 컴포넌트들&lt;/h1&gt;
&lt;h2 id=&#34;vpc&#34;&gt;VPC&lt;/h2&gt;
&lt;p&gt;VPC는 Virtual Private Cloud의 줄임말로 &amp;ldquo;가상 IP 네트워크&amp;rdquo; 로 이해할 수 있다. 이는 클라우드 내에 가상 데이터 센터라고 할 수 있다. VPC내에 있는 서버들끼리는 연결되어있으며, 사설 IP(Private IP)를 통해 서로 통신할 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: 사설 IP란?
예를 들어 &amp;lsquo;우리집 주소는 &amp;ldquo;서울시 성동구 마장로 ~&amp;rdquo; 이다&amp;rsquo; 했을때 &amp;ldquo;서울시~&amp;ldquo;는 공인 IP라 할 수 있다. 반면 집 안에서 &amp;ldquo;안방에 있는 손톱깎기 가져와&amp;rdquo; 했을 때 &amp;ldquo;안방&amp;rdquo; 은 사설 IP라고 할 수 있다. 즉 외부에서 어떤 위치를 칭하는 주소는 공인 IP이고 내부에서는 사설 IP로 위치를 찾는다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;VPC에서 사용하는 사설 IP 주소 대역은 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;주소&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Prefix 비트 수&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10.&lt;em&gt;.&lt;/em&gt;.*&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;172.16.&lt;em&gt;.&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;192.168.&lt;em&gt;.&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.aws.amazon.com/ko_kr/vpc/latest/userguide/images/nondefault-vpc-diagram.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;특정 VPC는 한 Region에 속해있고, 각각의 VPC는 완전히 독립적이다.&lt;/p&gt;
&lt;p&gt;사설 IP 주소를 선택하는거나, subnet을 만드는거, 라우트 테이블, 네트워크 게이트웨이 VPC는 클라우드 상의 다른 가상 네트워크와 논리적으로 분리되어있다. VPC 내에서 리소스를 띄울 수 있는데, 해당 VPC에 특정 IP 주소 범위를 할당하고, 서브넷을 추가하고, 보안 그룹을 연결하고 라우트 테이블을 설정할 수 있다. VPC의 장점은 프라이버시, 보안, 개인정보 데이터 유실같은 측면에서 장점을 가진다.&lt;/p&gt;
&lt;h2 id=&#34;subnet&#34;&gt;Subnet&lt;/h2&gt;
&lt;p&gt;서브넷은 대형 네트워크를 소형 네트워크들로 나눈 것이라고 생각하면 된다. 당연히 가용한 IP 주소 범위도 더 작아지게 되지만, 작은 네트워크의 유지관리가 좀 더 수월하고, 다른 네트워크로부터의 보안등을 제공하기 위해 사용한다. 정 서브넷 내부에서 리소스를 띄울 수 있는데, 인터넷에 반드시 연결되어야하는 리소스들을 위해서는 Public 서브넷을 사용하고, 인터넷에 연결될 필요없는 리소스들을 위해서는 Private subnet을 사용하면 된다. 각 서브넷의 리소스를 보호하기 위해서는, 보안 그룹이나 네트워크 접근 제어 리스트(ACL)등 여러가지를 적용할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;route-table&#34;&gt;Route Table&lt;/h2&gt;
&lt;p&gt;라우트 테이블은 트래픽의 방향을 정해주는 안내표이다. 즉, 발생한 네트워크 요청이 올바른 타겟으로 향할 수 있도록 한다. VPC내에 여러개의 라우트 테이블을 가질 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;internet-gateway&#34;&gt;Internet Gateway&lt;/h2&gt;
&lt;p&gt;인터넷 게이트웨이는 구축한 가상 네트워크를 외부와 연결하기 위한 관문이다.
&lt;img src=&#34;https://docs.aws.amazon.com/ko_kr/vpc/latest/userguide/images/internet-gateway-overview-diagram.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;위 그림과 같이 Public subnet의 Route Table에 0.0.0.0/0 에서 온 요청을 igw-id로 Mapping한다. 즉, 내부(선택한 사설 IP대역)에서 온 요청이 아닌, 외부(0.0.0.0)에서 온 네트워크 트래픽은 인터넷 게이트웨이로 향하게 하도록 한다.&lt;/p&gt;
&lt;h2 id=&#34;network-acl-and-security-group&#34;&gt;NETWORK ACL and Security Group&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;접근 제어 목록&amp;quot;인 ACL은 각 Subnet에 설정할 수 있는 접근 규칙이다. 일종의 방화벽과 비슷하다. 보안그룹은 인스턴스 수준에서 작동하는 반면 VPC는 서브넷 레벨에서 작동한다. 웹 서버냐, 데이터베이스 서버냐에 따라 이 보안 그룹의 Rule은 다를 수 있다. 예를 들어 웹서버에서는 외부의 HTTP/HTTPS 요청을 모두 허용하고 데이터베이스 서버는 HTTP대신 인바운드 MySQL 액세스를 허용하는 규칙을 사용할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;nat&#34;&gt;NAT&lt;/h2&gt;
&lt;p&gt;Private Subnet이 외부와 통신할 때, NAT는 사설IP 주소를 공인 IP와 map해주는 역할을 한다. Public Subnet상에서 Private Subnet 상의 인스턴스의 인바운드/아웃바운드 요청을 처리한다.&lt;/p&gt;
&lt;p&gt;Security groups: Security groups are a set of firewall rules that controls the traffic for your instance. In Amazon Firewall the only action that can be carried out is allow. You cannot create a rule to deny. The destination is always the instance on which the service security group is running. You can have a single security group associated with multiple instances.&lt;/p&gt;
&lt;p&gt;Customer Gateway — An Amazon VPC VPN connection links your data center (or network) to your Amazon VPC (virtual private cloud). A customer gateway is the anchor on your side of that connection. It can be a physical or software appliance&lt;/p&gt;
&lt;p&gt;NAT:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.lael.be/post/9534&#34;&gt;https://blog.lael.be/post/9534&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Data consistency</title>
      <link>/blog/2019/09/27/data-consistency/</link>
      <pubDate>Fri, 27 Sep 2019 08:22:22 +0900</pubDate>
      
      <guid>/blog/2019/09/27/data-consistency/</guid>
      <description>
        
        
        &lt;p&gt;global ordering 이 없는 경우:
카톡으로 질문도 안떴는데 대답이 먼저 보이는 경우&lt;/p&gt;
&lt;p&gt;Eventual consistency:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/10078540/eventual-consistency-in-plain-english&#34;&gt;https://stackoverflow.com/questions/10078540/eventual-consistency-in-plain-english&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/eventual-vs-strong-consistency-in-distributed-databases-282fdad37cf7&#34;&gt;https://hackernoon.com/eventual-vs-strong-consistency-in-distributed-databases-282fdad37cf7&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: AWS Sessions</title>
      <link>/blog/2019/09/26/aws-sessions/</link>
      <pubDate>Thu, 26 Sep 2019 08:22:22 +0900</pubDate>
      
      <guid>/blog/2019/09/26/aws-sessions/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://eksworkshop.com/logging/&#34;&gt;https://eksworkshop.com/logging/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this Chapter, we will deploy a common Kubernetes logging pattern which consists of the following:&lt;/p&gt;
&lt;p&gt;Fluentd is an open source data collector providing a unified logging layer, supported by 500+ plugins connecting to many types of systems.
Elasticsearch is a distributed, RESTful search and analytics engine.
Kibana lets you visualize your Elasticsearch data.&lt;/p&gt;
&lt;p&gt;App mesh
Controll flow
Data Flow&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Web Developer 101</title>
      <link>/blog/2019/09/24/web-developer-101/</link>
      <pubDate>Tue, 24 Sep 2019 08:22:22 +0900</pubDate>
      
      <guid>/blog/2019/09/24/web-developer-101/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://engineering.videoblocks.com/web-architecture-101-a3224e126947&#34;&gt;https://engineering.videoblocks.com/web-architecture-101-a3224e126947&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;cmd+ shift+ f =&amp;gt; find in path (goland)&lt;/p&gt;
&lt;p&gt;코드 어딧는지 찾기 딱좋다!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Go JSON</title>
      <link>/blog/2019/09/23/go-json/</link>
      <pubDate>Mon, 23 Sep 2019 14:22:22 +0900</pubDate>
      
      <guid>/blog/2019/09/23/go-json/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://medium.com/@masnun/making-http-requests-in-golang-dd123379efe7&#34;&gt;https://medium.com/@masnun/making-http-requests-in-golang-dd123379efe7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/17156371/how-to-get-json-response-from-http-get/31129967#31129967&#34;&gt;https://stackoverflow.com/questions/17156371/how-to-get-json-response-from-http-get/31129967#31129967&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/golang/comments/4n46oo/question_does_jsondecode_jsonnewdecoder_close_the/&#34;&gt;https://www.reddit.com/r/golang/comments/4n46oo/question_does_jsondecode_jsonnewdecoder_close_the/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sohamkamani.com/blog/2017/10/18/parsing-json-in-golang/#parsing-json-strings&#34;&gt;https://www.sohamkamani.com/blog/2017/10/18/parsing-json-in-golang/#parsing-json-strings&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;따라서 문자열을 ascii로 전송하혀면 string &amp;gt; utf8 &amp;gt; base64 또는 string &amp;gt; euckr &amp;gt; base64 등의 조합으로 표현 가능합니다.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Panic Recover</title>
      <link>/blog/2019/09/23/panic-recover/</link>
      <pubDate>Mon, 23 Sep 2019 14:22:22 +0900</pubDate>
      
      <guid>/blog/2019/09/23/panic-recover/</guid>
      <description>
        
        
        &lt;p&gt;// The recover built-in function allows a program to manage behavior of a
// panicking goroutine. Executing a call to recover inside a deferred
// function (but not any function called by it) stops the panicking sequence
// by restoring normal execution and retrieves the error value passed to the
// call of panic. If recover is called outside the deferred function it will
// not stop a panicking sequence. In this case, or when the goroutine is not
// panicking, or if the argument supplied to panic was nil, recover returns
// nil. Thus the return value from recover reports whether the goroutine is
// panicking.&lt;/p&gt;
&lt;p&gt;빌트인 리커버 function은 프로그램이 고루틴 패닉을 관리한다. defer된 함수안에서 recover를 호출하는 것은 일반적인 실행을 복구하고 panic을 호출한 에러값을 회수한다. recover가 그 defer된 함수 밖에서 호출되면 panic 상황을 멈출 수 없을 것이다. 이런 상황에서는, 또는 고루틴이 panic이 아닐때에는, panic으로 공급된&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://haisum.github.io/2017/09/11/golang-ioutil-readall/&#34;&gt;https://haisum.github.io/2017/09/11/golang-ioutil-readall/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mingrammer.com/translation-avoiding-memory-leak-in-golang-api/&#34;&gt;https://mingrammer.com/translation-avoiding-memory-leak-in-golang-api/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ahmet.im/blog/golang-json-decoder-pitfalls/&#34;&gt;https://ahmet.im/blog/golang-json-decoder-pitfalls/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/google/go-github/pull/317&#34;&gt;https://github.com/google/go-github/pull/317&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/&#34;&gt;http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Interface!
&lt;a href=&#34;https://medium.com/a-journey-with-go/go-understand-the-empty-interface-2d9fc1e5ec72&#34;&gt;https://medium.com/a-journey-with-go/go-understand-the-empty-interface-2d9fc1e5ec72&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: mac local kubernetes setup</title>
      <link>/blog/2019/09/19/mac-local-kubernetes-setup/</link>
      <pubDate>Thu, 19 Sep 2019 16:00:22 +0900</pubDate>
      
      <guid>/blog/2019/09/19/mac-local-kubernetes-setup/</guid>
      <description>
        
        
        &lt;h1 id=&#34;docker-for-mac&#34;&gt;Docker for Mac&lt;/h1&gt;
&lt;p&gt;Kubernetes를 이용해서 배포해야할때,
항상 Cloud위에서 수행하는 것보다는 로컬에 테스트 환경을 구축하고 테스트해보는 것이 생산성에 도움이 될 때가 많다. 그리고 그렇게 어렵지 않다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://collabnix.com/wp-content/uploads/2019/05/Screen-Shot-2019-05-11-at-6.17.51-PM.png&#34; alt=&#34;docker desktop&#34;&gt;&lt;/p&gt;
&lt;p&gt;docker desktop for mac을 설치하게 되면, Kubernetes가 활성화된 Docker를 사용할 수 있다. 활성화 되어있지 않다면 preference에 들어가서
enable만 해주면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl get nodes
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# NAME             STATUS   ROLES    AGE    VERSION&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# docker-desktop   Ready    master   114m   v1.14.6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;잘 출력된다.&lt;/p&gt;
&lt;h1 id=&#34;간단한-서버로-k8s-test해보기&#34;&gt;간단한 서버로 k8s test해보기&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;HandleFunc&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ResponseWriter&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;req&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Request&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#000&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Write&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;([]&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
	&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;

	&lt;span style=&#34;color:#000&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ListenAndServe&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;:5000&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;hello 엔드포인트로 get 을 날리면 response로 Hello World를 출력하는 간단한 서버이다.
이 서버를 컨테이너화 시켜 배포하기 위해 dockerfile을 간단히 작성해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;FROM golang:latest

WORKDIR /app

COPY . .

RUN go build -o main .

EXPOSE &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5000&lt;/span&gt;
CMD &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;./main&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 도커파일을 image화 시켜 docker hub에 publish 하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker login &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# docker hub 인증&lt;/span&gt;
docker build .
docker tag &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;image_id&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;username&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/exercise:v1
docker push &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;username&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;/exercise:v1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이제 push 된 이미지를 땡겨와서 kubernetes로 배포하는 배포파일을 만들어본다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apiVersion: apps/v1
kind: Deployment
metadata:
  name: exercise
  labels:
    app: exercise
spec:
  replicas: 1
  selector:
    matchLabels:
      app: exercise
  template:
    metadata:
      labels:
        app: exercise
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: exercise
        image: docker.io/{username}/exercise:v1
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;replica는 1개로 해서 1개의 팟을 띄워 컨테이너를 올리는 Deployment 오브젝트를 만들어본다. 5000번 포트를 사용하고 있는 서버이기 때문에 container 의 포트를 5000으로 지정해준다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;terminationGracePeriodSeconds: 30 는 pod 종료 시에 graceful shutdown을 위해 30초의 grace period를 두도록 하는 옵션이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;imagePullPolicy는 로컬에 동일한 이름의 이미지가 존재해도, 항상 이미지를 pull하도록 하는 옵션이다.
이 외에도 여러가지 옵션을 테스트 해볼 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubernetes apply -f sample.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이제 pod이 의도한 대로 잘 생겼는지 확인해본다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl get pod
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# NAME                       READY   STATUS    RESTARTS   AGE&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# exercise-b97678cfd-mpppx   1/1     Running   0          9s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl describe pod/exercise-b97678cfd-mpppx &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 아까 조회한 pod의 name을 이용해서 pod의 자세한 리소스를 조회할 수 있다.&lt;/span&gt;
kubectl logs pod/exercise-b97678cfd-mpppx &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 해당 팟에서 발생한 로그도 조회 할 수 있다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;describe를 통해 아래와 같은 이벤트 정보도 조회할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Events:
  Type    Reason     Age   From                     Message
  ----    ------     ----  ----                     -------
  Normal  Scheduled  47s   default-scheduler        Successfully assigned default/exercise-b97678cfd-mpppx to docker-desktop
  Normal  Pulling    45s   kubelet, docker-desktop  Pulling image &amp;quot;docker.io/nayoonhwang/exercise:v1&amp;quot;
  Normal  Pulled     42s   kubelet, docker-desktop  Successfully pulled image &amp;quot;docker.io/nayoonhwang/exercise:v1&amp;quot;
  Normal  Created    42s   kubelet, docker-desktop  Created container exercise
  Normal  Started    41s   kubelet, docker-desktop  Started container exercise
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;정상적으로 동작하는지 테스트해보기 위해서 Hello World 출력을 확인해본다. 컨테이너의 포트와 호스트의 포트를 포워딩해주기 위해(docker run 시에 -p 옵션을 통해 port binding 해주는 것과 같이) 아래와 같이 입력한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl port-forward deployments/exercise &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;exercise라는 이름의 deployment의 5000번 포트를 포워딩 해주는 커맨드이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl localhost:5000/hello
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Hello World&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;컴퓨터에서 돌고있는 쿠버네티스 pod이 정상 동작임을 확인했다. 이제 다른 여러가지 테스트를 수행해볼수 있다~!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: golang nil check</title>
      <link>/blog/2019/09/19/golang-nil-check/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019/09/19/golang-nil-check/</guid>
      <description>
        
        
        &lt;h1 id=&#34;golang-zero-value&#34;&gt;golang zero value&lt;/h1&gt;
&lt;p&gt;초기화값이 없는 상태로 선언된 변수들은 각 타입의 zero value값으로 초기화된다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;타입&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;값&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;정수(int)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;실수(float)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;boolean&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;문자열(string)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;실수(float)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;interface, slice, channel, map, pointer, function&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;배열(array)이나 구조체(Struct)의 요소(element)들은 각 필드들이 zero value를 가진채 초기화된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;hello&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;hello&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;hello&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Print&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;h&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;// { [] &amp;lt;nil&amp;gt;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;hello라는 구조체를 정의했을때, 특정값 없이 선언하면, 위와 같이 zero 값이 들어가는걸 알 수 있다.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Kubernetes Deployment(삽질)</title>
      <link>/blog/2019/09/18/kubernetes-deployment%EC%82%BD%EC%A7%88/</link>
      <pubDate>Wed, 18 Sep 2019 16:22:22 +0900</pubDate>
      
      <guid>/blog/2019/09/18/kubernetes-deployment%EC%82%BD%EC%A7%88/</guid>
      <description>
        
        
        &lt;p&gt;Kubernetes로 작업할 때 사용하는 것은 Kubectl 이라는 kubernetes 용 cli가 있다. 클러스터를 관리할 때 사용하는데, 쿠버네티스 클러스터 위에 application 배포시 유용하게 사용된다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://kubectl.docs.kubernetes.io/pages/kubectl_book/getting_started.html&#34;&gt;Kubectl Tutorial&lt;/a&gt; 위 링크에 친절하게 설명된 튜토리얼이 있어 따라해보면 좋다.&lt;/p&gt;
&lt;p&gt;쿠버네티스에는 Object라는 개념이 있는데, 예를 들어 Application 배포 시에도 이런 배포용 Object를 만들어 사용하는 것이다. 이 Object는 Yaml file 형식으로 표현할 수 있다.&lt;/p&gt;
&lt;p&gt;아래는 예시이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;apps/v1 # apps/v1beta2를 사용하는 1.9.0보다 더 이전의 버전용&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Deployment&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx-deployment&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;selector&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;matchLabels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;replicas&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 템플릿에 매칭되는 파드 2개를 구동하는 디플로이먼트임&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;containers&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;nginx:1.7.9&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ports&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;containerPort&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;모든 쿠버네티스 오브젝트는 오브젝트의 구성을 결정하는 두 개의 필드 spec status 를 가진다. spec은 우리가 만들 오브젝트가 가져야하는 조건을 의미한다. Kubernetes는 제공된 spec을 기준으로 Object를 생성한다.
status 는 오브젝트의 실제 상태를 나타내고, Kubernetes 시스템에 의해 업데이트 된다. Kubernetes는 오브젝트의 실제 상태(status)를 spec에 일치시키기 위해 능동적으로 관리한다.
예를 들어 위 yaml을 기준으로 object를 생성 했을때 spec에 정의된 replicas: 2 에 의해 2개의 인스턴스를 생성하여 컨테이너를 띄운다.
만약 그 중 1개에서 Fail 이 발생한다면, Kubernetes 시스템에서 자체적으로 대체 인스턴스를 생성하여 spec과 status 간의 차이를 제거하려할 것이다.&lt;/p&gt;
&lt;p&gt;Pod은 Kubernetes의 가장 작은 개념이자 핵심 개념이다. 한개의 팟은 Application의 한 인스턴스로 동등하다. 그리고 이 인스턴스는 보통 한 개의 컨테이너다. 팟 하나에 하나의 ip 주소를 가지고 있다.
즉, 한 pod은 한 컨테이너가 동작하는 한개의 인스턴스이다. 물론 여러개 컨테이너가 올라갈 수도 있지만, 난 간단히 한 pod에 한 컨테이너라고 이해하고 진행했다. 팟은 보통 직접만들기 보다는, 싱글톤(Singleton) 이라도 대부분 위와 같이 Deployment와 같은 컨트롤러를 사용한다. 컨트롤러는 클러스터 범위에서 복제와 롤아웃(Rollout) 관리 뿐만 아니라 자가치료 기능도 제공한다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/ko/docs/concepts/workloads/pods/pod/&#34;&gt;참고&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;object-생성하기&#34;&gt;Object 생성하기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f config.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;yaml file 에 정의한 바를 기반으로 deployment/service를 생성할 수 있다. 다른 방식으로도 생성할 수 있지만, 이렇게 생성하는 것을 권장하고 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl create -f config.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이런식으로 생성해도 되지만, apply를 해도 만약 해당 이름의 deployment가 존재하지 않을 경우 생성해주기 때문에 create를 굳이 쓸필요가없다.&lt;/p&gt;
&lt;p&gt;환경변수 설정시 등에서 활용할 수 있는 Configmap의 예시를 한번 들어보면, 아래와 같은 식으로 special-config라는 이름의 Configmap을 정의한 후에 &lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ConfigMap&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;special-config&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;SPECIAL_LEVEL&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;very&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;SPECIAL_TYPE&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;charm&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;apply를 통해 만들어준다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;kubectl apply -f config.yml
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# configmap/special-config created&lt;/span&gt;
kubectl get configmaps
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# NAME             DATA   AGE&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# special-config   2      8s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;만들어준 configmap은 pod 생성시에 아래와 같은 식으로 참조하여 사용할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pod&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;dapi-test-pod&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;containers&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;test-container&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;k8s.gcr.io/busybox&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;command&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/bin/sh&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;envFrom&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;configMapRef&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;	  		&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;special-config&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;envFrom:
- configMapRef:
	name: special-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 정의하면 special-config내에 data에 정의한 모든 변수들을 container의 환경변수로 사용할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;env:
- name: SPECIAL_LEVEL_KEY
  valueFrom:
    configMapKeyRef:
      name: special-config
      key: SPECIAL_LEVEL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 envFrom와 configMapRef 키워드 대신 env와 configMapKeyRef로 정의하면 speical-config configmap에서 원하는 변수를 정의해서 쓸 수 있다. 아무래도 위에 있는 envFrom 이 좀 더 쉽게 사용할 수 있는 방법이다.&lt;/p&gt;
&lt;h2 id=&#34;deploy-updated-application&#34;&gt;Deploy Updated Application&lt;/h2&gt;
&lt;p&gt;그렇다면 이미 돌아가고 있는 Instance을 업데이트 해야할 땐 어떻게 해야할까. 예를 들어 application에 변동 사항이 생겼고, source code에 변동이 생겼으니, build artifact가 달라졌을것이다. release나 master 같은 경우엔 당연히 build-number/ release-number를 다르게 해서 image에 tag를 달아주고 해당 image를 참조하여 build 하도록 하면 config.yml에 매번 변동이 생기기 때문에 pod를 rolling update 한다. 하지만 develop같은 경우엔 어떻게 될까. develop같은 경우엔 변동사항이 많고 굳이 release-number / build-number를 관리하지 않는다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/40366192/kubernetes-how-to-make-deployment-to-update-image&#34;&gt;stackoverflow 에 많은 질문들&lt;/a&gt;이 올라와있다. &lt;a href=&#34;https://kubernetes.io/docs/tasks/manage-kubernetes-objects/declarative-config/&#34;&gt;공식 Kubernetes 가이드&lt;/a&gt;등을 참조해봤을 때,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubernetes set image deployments/{my_deployment} {container_name}={image_repo_url}:{tag_name}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;요 set 커맨드를 이용해서 뭔가를 update를 줘서 kubernetes가 rolling update를 수행할 수 있게 하라는 답변들이 가장 많았다. 일단 rolling update를 수행하게 되면,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;imagePullPolicy: Always&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;요 imagePullPolicy가 Always로 설정되어있을때, 항상 image를 repository에서 pull 땡겨오기 때문에 같은 tag를 가진 이미지라도 업데이트된 이미지가 존재할때 해당 업데이트를 받아올수 있다.&lt;/p&gt;
&lt;p&gt;사실 Rolling Restart 라는 개념을 이때 사용하면 딱 괜찮은데, &lt;a href=&#34;https://github.com/kubernetes/kubernetes/issues/13488&#34;&gt;이슈&lt;/a&gt;가 이미 존재했고, 1.15 버전부터는&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl rollout restart {pod}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;라는 커맨드가 생겨서 한번에 해결할 수 있다.&lt;/p&gt;
&lt;p&gt;하지만 우리가 사용하고 있는 버전이 1.14여서 해당 커맨드를 사용할 수 없는데, 이땐 각종 야매 방법을 써야한다&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://techoverflow.net/2019/04/02/how-to-force-restarting-all-pods-in-a-kubernetes-deployment/&#34;&gt;야매1&lt;/a&gt; 뭐 이런 방법이 있을 수 있고, tag가 latest일 경우에는,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kubectl set image deployments/exercise exercise=docker.io/{username}/exercise:latest
kubectl set image deployments/exercise exercise=docker.io/{username}/exercise
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이런식으로 두 번 치는걸로 이미지를 강제 업데이트 시켜 rolling update를 유도할 수 있다. 단 이 방법은 tag 가 latest일때만 작동한다. develop같이 branch 이름으로 하는 경우에는 또 동작하지않는다.&lt;/p&gt;
&lt;p&gt;이를 다 테스트 해보기 위해 로컬에 kubernetes를 설치하고 하나하나 해봤는데, 다행히 Mac에는 Docker for Mac을 이용하면 쉽게 설치할 수 있었다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://eksworkshop.com/logging/&#34;&gt;https://eksworkshop.com/logging/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: !!</title>
      <link>/blog/2018/02/02/</link>
      <pubDate>Fri, 02 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/02/02/</guid>
      <description>
        
        
        &lt;p&gt;시간 꽤 안간다 싶었는데, 눈 떠보니 2월이다. 1월은 꽤 dynamic했다. 2일에 입사해서, 정신없이 일주일을 보내고, 핸드폰 지르고, 카드 만들고, 헤드폰 지르고, 차 지르고, 또 여러가지 지르고, 월급날 기다리고, 하다보니 또 어느새, 정신없이 3주가 지났다. 중간중간 고민을 많이 했던 것같기도하고, 내가 지금 여기서 일하고 있는 게 잘 하고 있는건지 잘 모르겠기도 하고, 했던 것같다. 어쨌든 무사히 한달을 지냈다.&lt;/p&gt;
&lt;p&gt;꽤 많은 일이 일어났던 한달이었다.&lt;/p&gt;
&lt;p&gt;안에서 가족들과나, 밖에서 회사에서나,&lt;/p&gt;
&lt;p&gt;어쨌든, 뭔가 다 잘 풀린것같다. 다행이다. 정말.&lt;/p&gt;
&lt;p&gt;이번주부터는 운전연습을 시작했다. 면허딴지 얼마 안되서 그런지 다행히도 감을 금방 찾은 것같다. 물론 위기가 몇번 존재하기는 했다. 박을 뻔한&amp;hellip;ㅎㅎㅎ 그리고 아버지 친구인 &lt;em&gt;&lt;strong&gt;아저씨&lt;/strong&gt;&lt;/em&gt; 도 뵜다.&lt;/p&gt;
&lt;p&gt;의외로 정말 좋으신 분이었다. 조용조용 말씀해주시면서, 많은 말씀을 해주셨다. 근처 일본식 와규 전문점까지 가서 고기도 사주셨다. 내가 생각한 아저씨~ 스타일이 아니라서 놀랐던 것같다. 인생에서 중요한 것들에 대해서 멀리 볼 수 있기를 바라신 것같다. 실력을 쌓는 것이 일단 신입의 입장에서는 중요하지만, 앞으로 인생을 살면서는, 다른 사람들에게 좋은 인상을 주고 신뢰를 줄 수 있어야 한다는 말, 결국엔 다 사람이라는 말이 많이 와닿았다. 주변 사람들에게 신뢰를 주고, 좋은 인상을 남기고, 많은 좋은 사람들을 만나는 게, 결국 내 자산이 된다는 말이 아직 기억에 남는다. 굳이 다른 회사를 가는 게 아니더라도, 1년마다 이력서를 써보라는 말씀도 좋았다. 내가 1년동안 무슨 일을 했는지, 어느 부분에 어떤 기여를 했는지 나 자신에 대해서 돌아볼 수 있는 기회가 될 거라고 말씀해주셨다. 또한 5년차 정도의 멘토를 구해보라는 말씀도 해주셨다. 내 커리어적인 상황을 속 시원히 털어놓을 수 있을 만한 좋은 분을 구해보라고 조언해주셨다. 정말 맞는 말인 것같고 크게 공감할 수 있었다. 귀한 시간 내서 내게 여러 좋은 말씀을 해주신 아저씨께 참 감사드린다.&lt;/p&gt;
&lt;p&gt;더 잘 행동하고, 더 좋은 사람이 되고싶다는 생각이 든다. 나 자체를 바꿀 수는 없겠지만, 나의 character에서 나올 수 있는 가장 좋은 방향으로 나아가고 싶다. 책임감있고, 신뢰를 줄 수 있는 사람이 되고싶다.&lt;/p&gt;
&lt;p&gt;노력해야겠다! 더 좋은 사람이 되어가고 있는 나 자신을 보는게 제일 행복한 것같다.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: wine</title>
      <link>/blog/2018/01/30/wine/</link>
      <pubDate>Tue, 30 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/01/30/wine/</guid>
      <description>
        
        
        &lt;p&gt;프랑스 와인의 주요 산지는 보르도, 부르고뉴, 론 세가지로 나눌 수 있다.
이 중 부르고뉴를 살펴보자.&lt;/p&gt;
&lt;p&gt;부르고뉴 지방은 샤블리, 마코네, 코트 샬로네즈, 코트 드본, 코트 드뉘, 보졸레 로 나뉘어 있다. 각 지역의 레드와인과 화이트 와인 생산 비율을 살펴보면, 샤블리는 화이트 100%, 마코네는 레드 15% 화이트 85%, 코트 샬로네즈 레드 65%, 화이트 40%, 코트 드본은 레드 70% 화이트 30%, 코트 드뉘는 레드 95% 화이트 5%, 보졸레는 레드 99% 화이트 1%이다.&lt;/p&gt;
&lt;p&gt;부르고뉴의 포도 품종은
RED:
한국인에게 선호도가 높은, 옅은 컬러와 부드러운 탄닌, 좋은 산도를 가진 Pinot Noir와
가볍고 fruity한 Gamay를 재배한다.&lt;/p&gt;
&lt;p&gt;White:
제조사와 지역에 따라 다양한 스타일을 가지는 Chardonnay(샤도네이),
강한 신맛과 신선한 향을 가지는 Aligote를 재배한다.&lt;/p&gt;
&lt;p&gt;부르고뉴의 와인 aoc 등급을 분류하면,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aoc Gran Cru&lt;/li&gt;
&lt;li&gt;aoc premier Cru&lt;/li&gt;
&lt;li&gt;aoc village&lt;/li&gt;
&lt;li&gt;aoc regional&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4가지로 나뉜다.&lt;/p&gt;
&lt;p&gt;부르고뉴 화이트 와인은&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;샤블리(Chablis)&lt;/li&gt;
&lt;li&gt;코트 드 본&lt;/li&gt;
&lt;li&gt;마코네
등이 유명하고, 위에서 말했다싶이 산지를 의미한다. 그 중 샤블리는 100% 샤르도네(or 샤도네이)로 만들어지며, 지역 특유의 선선한 기후 덕에 가볍고(or 신선하고) 섬세한 타입의 화이트 와인이고 미네랄 풍미가 강하다. 굴 등 해산물과 조합이 좋다. 샤블리 와인은 쁘띠 샤블리 &amp;lt; 샤블리 &amp;lt; 샤블리 premier Cru &amp;lt; 샤블리 Gran Cru 로 등급이 나뉜다.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 캐나다를 다녀왔다</title>
      <link>/blog/2017/11/08/%EC%BA%90%EB%82%98%EB%8B%A4%EB%A5%BC-%EB%8B%A4%EB%85%80%EC%99%94%EB%8B%A4/</link>
      <pubDate>Wed, 08 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017/11/08/%EC%BA%90%EB%82%98%EB%8B%A4%EB%A5%BC-%EB%8B%A4%EB%85%80%EC%99%94%EB%8B%A4/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;https://brightcove04pmdo-a.akamaihd.net/5104226627001/5104226627001_5230047963001_5203640497001-vs.jpg?pubId=5104226627001&amp;amp;videoId=5203640497001&#34; alt=&#34;Canada&#34;&gt;
구글에 캐나다를 치면 나오는 이미지이다.&lt;/p&gt;
&lt;p&gt;나는&amp;hellip;그냥 캐나다가 가고 싶었다.
&lt;em&gt;I wanted for a long time to travel Canada&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t know the exact reason why I wanted it, but maybe I would be attracted by the image of the country flag and the image of Canada itself. Maybe just a kind of admiration. I just thought that Canadian would be cool. There were no specific reason.&lt;/p&gt;
&lt;p&gt;내가 왜 원했는지에 대한 정확한 이유는 모른다. 아마, 캐나다 국기나, 캐나다라는 나라가 가지고 있는 그 특유의 이미지에 끌렸던 것같다. 어쩌면 동경..이라고 표현할 수 있겠다. 캐나다 사람들은 그냥 뭔가 멋있을 거라고 생각했다.&lt;/p&gt;
&lt;p&gt;So, I decided to go Canada. I&amp;rsquo;ve experience Europe twice. Once with my college friends and once with my mother. Actually I wanted to go Canada alone, because I thought that I have some important things to think about alone. I had a harsh time at summer and I felt that I had a really important decision in my life. I chose the life of developer. Not just developer, not developer of Korean big company, THE DEVELOPER itself. I wanted to think about the past and present of myself. Are you going right? Is it the right way to become happy? Maybe this record can make myself very embarassing, but my final goal is to be happy, so being sure that I&amp;rsquo;m going right was really important.&lt;/p&gt;
&lt;p&gt;그래서, 난 캐나다에 가기로 결심했다. 유럽은 두 번 경험해봤고, 한 번은 대학 친구들, 한 번은 엄마랑 다녀왔다. 사실 캐나다는 혼자 가고 싶었다. 혼자 생각할 만한 거리가 많다고 생각했기 때문이었다. 대학생활에서 개발때문에 힘들어하고, 개발자로서의 삶이 내게 맞는 것인지 굉장히 고민하던 3년을 보냈으면서, 편한 길을 포기하고 개발자로서의 삶을 선택했다. 내 선택이 맞는 것인지, 어떻게 나는 그런 선택을 하게 되었는지 나 자신의 과거와 현재를 돌아보고 싶었다. 맞는 길을 가고 있는 건지, 행복해질 수 있겠는지. 나중에 이렇게 일기를 써놓은 걸 보면 이불을 차는 수준을 넘어 이불과 지구밖으로 발사될정도로 민망할 수도있지만, 나는 최종적으로 행복해지는게 인생의 목표인 사람이라, 내가 선택한 이 길이 행복으로 갈 수 있는가가 정말 중요했다.&lt;/p&gt;
&lt;p&gt;However, afraid of my mother and myself, I decided to go Canada with 2 friends. I was little bit concerned, because they were not that so close friends with me. They were not special friends, they were just college friends! I know I don&amp;rsquo;t have many special friends. After 20, it was hard to make really close friends and maintain the close relationship with old friends.&lt;/p&gt;
&lt;p&gt;하지만, 엄마, 그리고 나 자신에 대한 두려움으로, 두 명의 친구와 캐나다를 가기로 결정했다. 별로 그렇게 친한 친구들이 아니어서, 사실 좀 걱정했다. 혹여나 싸울까,,,,그냥 대학 동기/선배였으니깐, 물론 나는 특별한 친구들이 그렇게 많은 편이 아니다. 20살 이후에는 정말 친한 친구를 만들기 어렵거니와, 기존 친구들과의 관계를 유지하기 어려웠기 때문이었다.&lt;/p&gt;
&lt;p&gt;If I would say the result in one sentence, it was a total success.
한 문장으로 결과를 말한다면, 완전 성공이었다.&lt;/p&gt;
&lt;p&gt;Still, I truly feel thankful for my friends who traveled with me. I think the wonder I could feel in Canada doubled because of them. There was unexpected &amp;ldquo;chemistry&amp;rdquo;, as the word directly means, with the friends. I slowly and totally felt the original wonder of nature. I was temporarily isolated from the casual life.
여전히, 난 나와 여행한 친구들에게 진정 감사함을 느낀다. Canada에서 느낄 수 있었던 감동은 친구들 덕분에 두배가 되었다. 다른 사람과 함께였다면, 또는 나 혼자였다면, 느낄 수 없었던 것들을 많이 느낄 수 있었다. 정말 문자 그대로 의외의 &amp;ldquo;케미&amp;quot;를 이 친구들과의 캐나다에서 느낄 수 있었다. 자연 자체의 아름다움을 천천히, 또 온전히 느낄 수 있었고, 잠시 일상으로부터 분리되어있었다.&lt;/p&gt;
&lt;p&gt;그림에서만 보던, 아니, 그림보다 약 100만배는 더 예쁜, 아름다운, 멋있는, 황홀한 풍경들을 눈에 담을 수 있었고, 귀에 들을 수 있었고, 코에 냄새 맡을 수 있었다. 왜 breath-taking view라는 단어가 존재하는지 알 수 있었고, 왜 자연 앞에 인간은 정말 작은, 티끌만한 존재인지 알 수 있었다.&lt;/p&gt;
&lt;p&gt;그냥 너무 예뻤다.
그냥 좋았다.
그냥 가만히 있어도 행복했다.&lt;/p&gt;
&lt;p&gt;그리고 우리의 bgm도 얻었다. yuki guramoto - lake louise, 지금도 이 음악을 들으면 호수가 머리 속에서 쫙~&lt;/p&gt;
&lt;p&gt;사실 캐나다를 다녀와서, 여행을 다녀왔다고 해서 정답을 얻진못했다.&lt;/p&gt;
&lt;p&gt;조금 더, 정답을 계속 생각해보는 걸로. 일단 지금은, 일상으로 돌아왔지만, 나름 행복하다.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 샌프란시스코</title>
      <link>/blog/2017/09/09/%EC%83%8C%ED%94%84%EB%9E%80%EC%8B%9C%EC%8A%A4%EC%BD%94/</link>
      <pubDate>Sat, 09 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017/09/09/%EC%83%8C%ED%94%84%EB%9E%80%EC%8B%9C%EC%8A%A4%EC%BD%94/</guid>
      <description>
        
        
        &lt;p&gt;샌프란시스코의 기억을 잊고 싶지 않아 몇가지 사진을 올려본다. 호오,,생각해보면 참 좋았다. 유럽도 너무 좋았지만, 미국도 난 정말 좋았다. 둘 다 또 가고싶다!!
시청 지나서 시내에서 구경중
&lt;img src=&#34;https://lh3.googleusercontent.com/a6Ni1gqzCGmOWwnfV7tP8tSriDdAndZLB64LGk0hPJWQJF-5b7GDZ2jrWf5hZgDJGSc9CsNZ=w2688-h1934&#34; alt=&#34;언덕 올라가는길&#34;&gt;&lt;/p&gt;
&lt;p&gt;샌프란시스코 내 유명한 언덕, 이름이 기억 안남, 언덕 위 올라가는 길에 있었던 빅토리아풍 저택
&lt;img src=&#34;https://lh5.googleusercontent.com/kbq_sKPDae8_5MUHH7Zw-cGjctNgyfPxBsvKCwVt1kbQJ3VIVOKqR73x8-dqYqk8gIS93PX6S4b0IXc=w3360-h1952-rw&#34; alt=&#34;언덕 올라가는 길&#34;&gt;&lt;/p&gt;
&lt;p&gt;스탠포드 대 내부
&lt;img src=&#34;https://lh6.googleusercontent.com/cJujUVJbKocOJl6VC5LG4RzqXheflsKSyj7xglZoEZff8p1UmwodoS5_OOJH_mHBQCsldxFIJkHlq7A=w3360-h1952-rw&#34; alt=&#34;스탠포드&#34;&gt;&lt;/p&gt;
&lt;p&gt;스탠포드 컴퓨터공학과
&lt;img src=&#34;https://lh3.googleusercontent.com/8Z18pWodOseguKqwOwXE29mj-bg9MT-BDnHL2EQ2PHUZfimZErB6bSH6GBcRg-_l1-Rn7t9-uFTs-mk=w3360-h1952-rw&#34; alt=&#34;스탠포드 컴퓨터공학과&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: 토요일</title>
      <link>/blog/2017/09/09/%ED%86%A0%EC%9A%94%EC%9D%BC/</link>
      <pubDate>Sat, 09 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017/09/09/%ED%86%A0%EC%9A%94%EC%9D%BC/</guid>
      <description>
        
        
        &lt;p&gt;일반적인 배열, cpp의 Vector 컨테이너 : 개체들을 연속적인 메모리 공간에 저장, 따라서 position index로 접근이 가능하다(상수 복잡도 가능). 원소들 간 포인터 연산 가능.(포인터 연산 말씀하신게 이거였구나아아!)
만약에 일반적인 linked list로 만들어졌다면, 연속적인 메모리공간에 저장되지않았을 것이므로, 포인터 연산이 불가능하고, position index로 접근할 수 없었을 것이다. 한 원소를 찾을 때도 처음이나 끝부터 선형탐색해야한다. 단, 컨테이너 내 어느 위치에서도, 삽입/삭제가 빠르다.&lt;/p&gt;
&lt;p&gt;cpp의 stack과 queue는 각각 deque, list 기반으로 만들어진 컨테이너다.
&lt;a href=&#34;https://stackoverflow.com/questions/2247982/c-deque-vs-queue-vs-stack&#34;&gt;stackoverflow&lt;/a&gt;게시글에서 참조했듯이,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;stack은 deque를 underlying 컨테이너로 사용하여 만들고, queue는 list를 underlying 컨테이너로 하여 만든다. 즉, stack은 제한된 deque, queue는 제한된 list로 볼 수있다.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;deque은 앞(front)에서도, 뒤(Last)에서도 삽입/삭제가 가능한, 양 끝단(end)이 존재하는 double-ended queue이다. deque은 stack 뿐만 아니라 queue를 구현하는 컨테이너로도 쓰일 수 있다. stack은 FILO으로, stack의 top, 즉, 뒷 부분에서만 삽입/삭제가 가능하고, queue는 앞에서 삭제, 뒤에서 삽입이 가능하므로, restricted deque라고 할 수 있다.&lt;/p&gt;
&lt;p&gt;Gradient descent(경사 하강법, Optimizer)을 이용해 Cost function의 value가 최소인값을 찾는다. 미분을 하면 조금 더 쉽겠지만, feature가 여러개일때는 미분이 어렵기 때문에 Gradient descent가 좀 더 적합한 방법이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linear Hypothesis&lt;/strong&gt;
H(x1, x2, x3, &amp;hellip;, xn) = w1x1+ w2x2+ &amp;hellip;. + wnxn
H(x)= Wx+b(w: 가중치 &amp;amp; b: bias, 절편)&lt;/p&gt;
&lt;p&gt;Binary Classification
&lt;strong&gt;Sigmoid Function&lt;/strong&gt;
미분가능하게,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;logistic&lt;/strong&gt;
minimum값이 여러 개(local minimum, gloal minimum)가 되지 않고 최적값을 찾을 수 있도록.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: </title>
      <link>/blog/2017/08/28/</link>
      <pubDate>Mon, 28 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017/08/28/</guid>
      <description>
        
        
        &lt;p&gt;2달간의 인턴 기간동안 배운 것을 정리해두지 않으면, 정말 큰 손해일 것 같다는 생각이 문득!들어 정리를 결심했다.&lt;/p&gt;
&lt;p&gt;&amp;mdash;&amp;mdash;&amp;mdash;2018.1.30
하지만 지금 보니! 난 정리를 안했었군! 이런,,,나레기&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Docker로 서버 배포 도전</title>
      <link>/blog/2017/08/28/docker%EB%A1%9C-%EC%84%9C%EB%B2%84-%EB%B0%B0%ED%8F%AC-%EB%8F%84%EC%A0%84/</link>
      <pubDate>Mon, 28 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017/08/28/docker%EB%A1%9C-%EC%84%9C%EB%B2%84-%EB%B0%B0%ED%8F%AC-%EB%8F%84%EC%A0%84/</guid>
      <description>
        
        
        &lt;h1 id=&#34;azure-deploynginxpassenger&#34;&gt;azure deploy!(Nginx+Passenger)&lt;/h1&gt;
&lt;p&gt;애저 deploy 게시글을 쓴지 1년이 지나있다. 작년 8월 23일 작성한 게시글이었는데, 1년동안 많이 성장했다는 생각이 들면서도 많이는 나아가지 못한 듯하여 아쉽다. 제대로 이해했다고 생각했는데, 제대로 이해하지 않고 넘어간 부분이 많았고(Nginx가 어떤 역할을 하는 줄은 알고 썼던 거니&amp;hellip;?), 지금 생각해보면 후회되는 시간들이 많았던듯하다. 빨리 가을이 왔으면 좋겠고, 에너지가 생겨서 더 열심히 살 수 있었으면 좋겠다.&lt;/p&gt;
&lt;h1 id=&#34;docker로-서버-배포하기&#34;&gt;docker로 서버 배포하기&lt;/h1&gt;
&lt;p&gt;1년 전에 작성한 그 게시글을 docker로 대체해보고자 한다. 가상컴퓨터에 docker를 올려서 db용, web application server 용 두 개의 docker를 올려서 배포를 시도해보려고 한다. 해당 시도를 위해 몇 가지 정말 좋은 튜토리얼을 찾았다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://raccoonyy.github.io/docker-for-ghost-blogging/index.html&#34;&gt;raccoonyy님의 블로그&lt;/a&gt;
&lt;a href=&#34;https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html&#34;&gt;subicura님의 블로그&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;갓개발자! 님들이 정말 자세한 튜토리얼을 올려주셨다. 대체로 위 튜토리얼을 따라해보는 형태로 진행해보았다.&lt;/p&gt;
&lt;p&gt;나의 경우에는 비교적 간단하니
docker-compose 기능을 통해 web server, db server를 docker-compose.yml 파일에 정의하면 될 것으로 예상된다.&lt;/p&gt;
&lt;h2 id=&#34;vm-접속-docker-설치&#34;&gt;vm 접속, docker 설치&lt;/h2&gt;
&lt;p&gt;기본 credit으로 vm을 만들었다. 컴퓨터를 바꿔서 그런지, 아니면 1년 전과 달리 애저 포탈이 업그레이드 된 건지, 모든 과정이 훨씬 순조롭게 진행되었다. 그냥 공개 키 넣고 만든 후에 &lt;em&gt;ssh username@public_ip&lt;/em&gt; 이렇게 하니깐 바로 접속되서 꽤 놀랐다.&lt;/p&gt;
&lt;p&gt;접속한 vm에서&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -s https://get.docker.com/ &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sudo sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;docker는 root 권한인 sudo가 필요하기 때문에, 새로운 비밀번호를 설정하기 위해 sudo passwd로 비밀번호를 설정해준 후 root 권한으로 명령어를 수행한다.&lt;/p&gt;
&lt;p&gt;설치 완료는&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;명령어로 확인 할 수 있고, Client, Server 두 가지 모두 나와야 정상적으로 설치된 것이다. 도커 자체적으로 사용자로부터 커맨드를 받아 Server에 전달하는 Client, 실제 일을 수행하여 결과를 client에게 전달하는 docker Server로 나눠져 있다고 볼 수 있기 때문이다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-d&lt;/td&gt;
&lt;td&gt;detached mode, 백그라운드 모드&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-p&lt;/td&gt;
&lt;td&gt;호스트와 컨테이너의 포트를 연결(포트 포워딩), 9000:9000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-v&lt;/td&gt;
&lt;td&gt;호스트의 볼륨을 컨테이너와 공유하여 사용(마운트)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-e&lt;/td&gt;
&lt;td&gt;컨테이너에서 사용할 환경변수를 설정한다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-name&lt;/td&gt;
&lt;td&gt;컨테이너의 이름을 설정한다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-rm&lt;/td&gt;
&lt;td&gt;프로세스 종료 시에 컨테이너를 자동으로 제거한다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-it&lt;/td&gt;
&lt;td&gt;-i, -t 옵션을 동시에 준것으로 터미널 입력을 위한 옵션&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-link&lt;/td&gt;
&lt;td&gt;컨테이너들을 연결한다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{:.mbtablestyle}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Docker -link ~ ~ -p 12201:12201/udp -p 5555:5555
//should publish in multiple ports to listen udp/tcp, default tcp -&amp;gt; it is port binding between docker and host

docker create -i -t -v ~/projects:/root/workspace -w /root --name centos7_project -e &lt;span style=&#34;color:#000&#34;&gt;TZ&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;Asia/Seoul centos

docker start -I centos7_project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;맨 위 명령어는 MongoDb, ElasticSearch, GraylogServer 세개의 컨테이너를 한번에 열었어야 했을 때 사용했던 명령어였다. 두개의 포트를 열고자 했고 하나는 udp, 하나는 tcp로 열고자 했다. 이렇게 /udp를 붙여주지 않으면 기본으로 tcp 포트로 생성된다.&lt;/p&gt;
&lt;p&gt;두번째 커맨드는 centos라는 컨테이너를 생성하는 커맨드인데, -it 옵션에, -v 옵션을 통해 host의 projects폴더를 마운트하여 사용하였다. -w는 컨테이너의 작업 디렉토리를 root로 하겠다는 것이고 컨테이너 이름을 centos7_project로 할것이며 centos 이미지 위에 writable container layer을 만들것임을 의미한다. 컨테이너를 만들었으니 아래 커맨드는 만든 컨테이너를 시작하는 커맨드이다.&lt;/p&gt;
&lt;h2 id=&#34;컨테이너-실행해보기&#34;&gt;컨테이너 실행해보기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run ubuntu:16.04
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;run 커맨드를 통해 ubuntu:16.04 이미지가 저장되어 있는지 확인하고, 없다면 Pull을 통해 다운로드 하여 컨테이너를 Create한 후 Start한다. 즉, run 커맨드는 여러 커맨드들이 합쳐져 있는 커맨드라고 할 수 있다.&lt;/p&gt;
&lt;p&gt;References)
&lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/create/#initialize-volumes&#34;&gt;docker 공식 documentaion&lt;/a&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/28806135/jekyll-kramdown-how-to-display-table-border&#34;&gt;jekyll에서 표 그리는 법&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Blog에 검색기능추가하기</title>
      <link>/blog/2017/08/13/blog%EC%97%90-%EA%B2%80%EC%83%89%EA%B8%B0%EB%8A%A5%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017/08/13/blog%EC%97%90-%EA%B2%80%EC%83%89%EA%B8%B0%EB%8A%A5%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</guid>
      <description>
        
        
        &lt;h1 id=&#34;blog에-검색-기능-추가하기&#34;&gt;Blog에 검색 기능 추가하기&lt;/h1&gt;
&lt;p&gt;전부터 계속 시도했던 건데, 왜 인지 기억은 안나지만, 중간에 포기했었다. Jekyll 테마찾다가 우연히 검색기능을 다룬 블로그글을 보고 뽐뿌받고 어제 몇시간동안 삽질하다가 결국 처리했다. 최종발표 피피티는 도대체 언제만들까 ㅋㅋ..&lt;/p&gt;
&lt;p&gt;일단 몇가지 Jekyll 블로그가 어떻게 generate되는 지 이해해야 될 것이 있었는데, 그걸 모르고 계속 삽질 하다보니 오래걸렸었다.
&lt;a href=&#34;https://stackoverflow.com/questions/13266369/how-to-change-the-default-order-pages-in-jekyll/16625558&#34;&gt;stackoverflow&lt;/a&gt;에서 관련내용을 보고 무릎을 탁 치고 한줄 탁 치니까 해결되었다. ㅜㅜ&lt;/p&gt;
&lt;p&gt;뭐였나면,,,&lt;/p&gt;
&lt;h3 id=&#34;heading&#34;&gt;&lt;/h3&gt;
&lt;p&gt;각 html이나 markdown파일마다 layout을 정의하는게 규칙인데, 일반적인 글을 올릴때는 post로 지정해둔다. layout 폴더로 들어가보면, post, default, page, category_index가 있는데, 이것들이 site.pages, site.posts들을 의미하는 거였다. site는 이 블로그 자체를 의미하고 layout이 page냐 post냐 에 따라 각각 site.pages site.posts들에 저장되고 있었다(Jekyll 엔진 자체적으로 처리). 내가 원했던 건 메뉴에 search를 추가하는 것이었다.&lt;/p&gt;
&lt;p&gt;{% highlight ruby%}
assign pages_list = site.pages | sort:&amp;ldquo;url&amp;rdquo;
for node in pages_list
if node.title != null
if node.layout == &amp;ldquo;page&amp;rdquo;
&lt;li class=&#34;sb-close { if page.url == node.url }active{ endif }&#34;&gt;
&lt;a href=&#34;{{ node.url | prepend: site.baseurl }}&#34;&gt;{{ node.title }}&lt;/a&gt;
&lt;/li&gt;
endif
endif
endfor
{% endhighlight%}&lt;/p&gt;
&lt;p&gt;메뉴가 있는 includes/sidebar.html에는 이런식으로 코드가 작성되어있었기 때문에, pages_list = site.pages는 layout이 page인 파일들을 의미하는 것이었다. 따라서 page_list에 search를 추가하여 메뉴를 추가해야했다. 이는 search.html에&lt;/p&gt;
&lt;h2 id=&#34;-highlight-ruby&#34;&gt;{% highlight ruby%}&lt;/h2&gt;
&lt;h2 id=&#34;permalink-search&#34;&gt;layout: page
title: Search
permalink: /search/&lt;/h2&gt;
&lt;p&gt;{% endhighlight%}&lt;/p&gt;
&lt;p&gt;이런식으로 추가해주면 jekyll에 의해 자동으로 search가 page로 인식되고 pages_list에 search도 들어간다.&lt;/p&gt;
&lt;p&gt;아무튼 이제 메뉴에 search를 추가했으니, 실제로 검색을 위한 로직이 필요하다. 이는
&lt;a href=&#34;https://github.com/christian-fei/Simple-Jekyll-Search&#34;&gt;Simple-Jekyll-Search&lt;/a&gt;라는 JS 라이브러리를 사용했다. JS 라이브러리이기 때문에 NPM을 사용하여 설치할 수 있는데,&lt;/p&gt;
&lt;p&gt;&lt;em&gt;npm으로 설치하면 ~.min.js만 설치되서 이것만 로드하면 될 줄 알았더니 안되더라&amp;hellip;.물론 내가 잘 못 설치한 걸수도 있음.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;결국 레포지토리에서 Simple-Jekyll-Search.js인가 이거 다운받아서 루트 폴더 밑에 dest 폴더 만들고 넣어줬다. search.html에서 그 파일을 로드해줬고. 이외에도 plugin에 루비파일 넣고 몇가지 과정이 자잘자잘하게 해주면 된다. 이 &lt;a href=&#34;http://www.halryang.net/simple-jekyll-search/&#34;&gt;블로그&lt;/a&gt;에서 많이 참조해서 만들어놨다. 아마 Json을 이용해서 검색을 수행하는 듯하다. 매우 쫗은 라이브러리 감사합니당당당~.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: ruby setting 정리하기</title>
      <link>/blog/2017/08/13/ruby-setting-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0/</link>
      <pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017/08/13/ruby-setting-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0/</guid>
      <description>
        
        
        &lt;h1 id=&#34;ruby-환경설정&#34;&gt;RUBY 환경설정&lt;/h1&gt;
&lt;p&gt;ruby 자체를 Programming에 쓸 일은 별로 없지만, (요즘엔 Rails도 안쓰고 스크립트는 거의 Python으로 처리하므로,) 맥에 ruby를 깔아둬야 할 일은 꽤 자주 발생했다. 일단, Mac에서 많이 쓰는 Package Manager인 Homebrew도 ruby 기반이라 ruby가 설치 되어있어야하고, 지금 이 정적 블로그 엔진도 Jekyll이라는 ruby 기반 엔진이라, ruby가 없으면 로컬에서 돌려볼 수가 없었다. 컴퓨터를 바꾸기도 했었고 초기화로 메모리를 모두 날려먹은 적이 있어 기존에 설치해둔 ruby가 없어 설치하는 김에 이번 기회에 아예 게시글로 정리해두려고 한다.&lt;/p&gt;
&lt;p&gt;알다시피 맥에는 기본 Ruby가 깔려있다. 초반에는 이 기본 Ruby로 어찌저찌 해결했는데, Gem을 깔아야되는 상황이 되니 기본 ruby를 건드렸다간 큰일이날 듯했다. 물론 권한도 없었다. 하지만 강제로 권한을 풀었다간 뭔가 큰 일이 날것같은 느낌. 어디인지는 모르겠지만 Mac에서 기본적으로 ruby를 가지고 있는 이유는 어딘가에서 ruby를 시스템용으로 사용하기 때문이다. 결국 이 기본 ruby는 사용하지 않고 막 쓸 별개 ruby를 깔기로 했다. 정확히 기억은 안나지만, python도 비슷한 이슈를 가지고 있어서 virtualenv라는 가상환경을 사용했던듯하다. ruby에도 이런 환경(?) 매니저를 가지고 있다. 프로젝트마다 필요한 루비 버전이 다를 수 있기 때문에 해당 프로젝트에서 사용할 루비를 지정할 수도 있고 시스템 전반에서 주로 사용할 ruby를 지정할 수도 있다.&lt;/p&gt;
&lt;p&gt;Environment Manager for Ruby로 RVM과 rbenv 두 개가 있는데, 예전에 Rails를 2015년 하반기 처음 입문했을 때만해도 rvm을 많이 썼었다. 그때는 그냥 rbenv가 이름이 더 이뻐서 그걸 썼는데, 지금 다시 관련내용을 찾아보니, 거의 rbenv로 대세가 넘어왔다. 많은 게시물들이 rbenv를 다루고 있었다.&lt;/p&gt;
&lt;p&gt;{% highlight bash%}
brew update
brew install ruby&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Homebrew를 이용해서 Ruby를 설치하는것이 훨씬 편하다. 공식 페이지에서도 권장하고 있다. Homebrew가 없다면 밑에 링크에서 다운받도록 한다. Homebrew를 설치하는 데 필요한 루비는 맥 기본 루비이기때문에 루비를 따로 설치하지 않아도 그냥 Homebrew부터 깔면된다. Node, MySql등 여러 툴들을 사용할 때도 굉장히 유용하게 쓸 수 있기 때문에 맥 사용자라면, 깔아두는 것을 추천한다.
[Homebrew 설치하기](https://brew.sh/index_ko.html)

{% highlight bash%}
# If you use bash
echo &#39;export PATH=/usr/local/Cellar/ruby/2.4.1_1/bin:$PATH&#39; &amp;gt;&amp;gt; ~/.bash_profile
# If you use ZSH:
echo &#39;export PATH=/usr/local/Cellar/ruby/2.4.1_1/bin:$PATH&#39; &amp;gt;&amp;gt; ~/.zprofile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;나는 Oh-my-zsh라는 zsh 쉘을 쓰고 있기 때문에 아랫줄을 실행해주었다. 쉘에 PATH를 설정해주는 작업이다. 2.4.1_1 이는 버전명으로 설치한 버전명을 넣도록 한다.&lt;/p&gt;
&lt;p&gt;{% highlight bash%}
brew install rbenv ruby-build&lt;/p&gt;
&lt;h1 id=&#34;zsh&#34;&gt;zsh&lt;/h1&gt;
&lt;p&gt;echo &amp;lsquo;export PATH=&amp;quot;$HOME/.rbenv/bin:$PATH&amp;quot;&amp;rsquo; &amp;raquo; ~/.zprofile
echo &amp;lsquo;eval &amp;ldquo;$(rbenv init -)&amp;quot;&amp;rsquo; &amp;raquo; ~/.zprofile&lt;/p&gt;
&lt;h1 id=&#34;list-all-available-versions&#34;&gt;list all available versions:&lt;/h1&gt;
&lt;p&gt;rbenv install -l&lt;/p&gt;
&lt;h1 id=&#34;install-a-ruby-version&#34;&gt;install a Ruby version:&lt;/h1&gt;
&lt;p&gt;rbenv install 2.4.1&lt;/p&gt;
&lt;h1 id=&#34;set-ruby-version-for-a-specific-dir&#34;&gt;set ruby version for a specific dir&lt;/h1&gt;
&lt;p&gt;rbenv local 2.4.1&lt;/p&gt;
&lt;h1 id=&#34;set-ruby-version-globally&#34;&gt;set ruby version globally&lt;/h1&gt;
&lt;p&gt;rbenv global 2.4.1&lt;/p&gt;
&lt;p&gt;rbenv rehash
gem update &amp;ndash;system&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ruby를 깔았으니, 버전 관리 툴인 rbenv와 빌드 툴인 ruby-build를 brew를 통해 설치하도록 한다. 아까와 마찬가지로 .rbenv도 쉘 path에 등록해주고 쉘이 시작될때마다, rbenv가 init되도록 해준다.

설치가능한 버전들을 list해보고 원하는 버전을 설치한다. 설치후엔 **source ~./zprofile** 이 명령어를 한번 쳐주는 것도 좋다. 아까 환경변수 설정한것을 반영하도록 하는 명령어인데, 나의 경우엔 설치 후에 **rbenv global 2.4.1** 이 명령어가 먹히지않아서 **ruby -v** 했을 때 계속 옛날 루비 버전만 나왔었다. source 명령어 이후엔 잘 반영되었다. 어쩌면 터미널 껏다 켰음 그냥 됬을 수도 ㅋㅋ

rbenv rehash 이걸로 뭐였더라 무슨 변수 정리해주고, gem update를 해주면 &amp;lt;span style=&amp;quot;color:#003366&amp;quot;&amp;gt;ruby 설정완료.&amp;lt;/span&amp;gt;

이제 2.4.1 버전 루비로 블로그에 Gem도 설치하고 jekyll serve도 해야겠다.

[참고](https://stackoverflow.com/questions/14607193/installing-gem-or-updating-rubygems-fails-with-permissions-error)
*echo $PATH* 로 환경변수를 볼때, 환경변수에 등록된 순서가 *~/.rbenv/shims* 가 ruby보다 늦게 나오면, 에러가 날 수 있다고 한다. 즉, rbenv가 먼저 load되어야한다는 말, 그때는 bash에 *export PATH=$HOME/.rbenv/shims:$PATH* 를 가장 마지막 줄에 넣으면 된다고 한다. 아마도 가장 마지막 줄의 path가 가장 먼저 load되기 때문인듯하다.
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: GO data type</title>
      <link>/blog/2017/07/22/go-data-type/</link>
      <pubDate>Sat, 22 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017/07/22/go-data-type/</guid>
      <description>
        
        
        &lt;h1 id=&#34;go의-데이터-타입&#34;&gt;Go의 데이터 타입&lt;/h1&gt;
&lt;p&gt;(Java 빨리 배워야되는데 내 udacity ㅠ..)&lt;/p&gt;
&lt;p&gt;Data Types
데이터 타입은 변수에 어떤 값이 저장될 수 있는 지 저장하고, 제한한다. 해당 타입에 어떤 종류의 operation이 행해질 수 있는지 rule을 정하기도 한다.&lt;/p&gt;
&lt;p&gt;Primitive Data Types
byte, int8, uint8, int16, uint16, float32 등 값(value)를 저장할 때 사용한다. C나 Java에서 short, long등을 사용하는 것과 달리 비트 수를 명확히 지정하므로 난 좀 더 직관적이라고 생각한다. 이 data type들에는 몇가지 규칙이 있는데, 일단 연산에서 서로 data type이 다르면 컴파일 에러가 발생한다. int(num2) 이런식으로 변환해주면 연산시 유용하다. 단, 실수형을 정수형으로 바꾸면 소수점을 버릴 수 있다.&lt;/p&gt;
&lt;p&gt;중요한 점은 각 자료형마다 저장 가능한 단위이다.&lt;/p&gt;
&lt;p&gt;uint8	부호 없는(unsigned) 8비트, 1바이트 정수	0 ~ 255
uint16	부호 없는 16비트, 2바이트 정수	0 ~ 65535
uint32	부호 없는 32비트, 4바이트 정수	0 ~ 4294967295(대략 10^9 * 4)
uint64	부호 없는 64비트, 8바이트 정수	0 ~ 18446744073709551615
int8	부호 있는(signed) 8비트, 1바이트 정수	-128 ~ 127
int16	부호 있는 16비트, 2바이트 정수	-32768 ~ 32767
int32	부호 있는 32비트, 4바이트 정수	-2147483648 ~ 2147483647
int64	부호 있는 64비트, 8바이트 정수	-9223372036854775808 ~ 9223372036854775807
byte	uint8과 크기가 동일, 바이트 단위로 저장할 때 사용&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://pyrasis.com/book/GoForTheReallyImpatient/Unit08&#34;&gt;출처&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;당연히 해당 자료형이 담을 수 있는 것보다 큰 값을 대입하면 안된다. 예를 들어 input값이 10^10정도라고 한다면, uint64/int64는 써줘야 해당 값을 담을 수 있겠지.&lt;/p&gt;
&lt;p&gt;var num2 byte = 0x32
byte에는 보통 16진수, 문자 값으로 저장한다. 소켓통신을 통해 바이너리를 주고 받거나, 바이너리 파일에서 읽고 쓸때 자주 사용한다.&lt;/p&gt;
&lt;p&gt;HackerRank에서 푼 예제를 첨부한다.
{% highlight go%}
package main&lt;/p&gt;
&lt;p&gt;import (
&amp;ldquo;fmt&amp;rdquo;
&amp;ldquo;os&amp;rdquo;
&amp;ldquo;bufio&amp;rdquo;
&amp;ldquo;strconv&amp;rdquo;
)&lt;/p&gt;
&lt;p&gt;func main() {
var i uint64 = 4
var d float64 = 4.0
var s string = &amp;ldquo;HackerRank &amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scanner := bufio.NewScanner(os.Stdin)
// file등 input byte 를 읽을 때 편리한 Scanner 객체이다
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;var sec uint64
var dob float64
var str string
value := make([]string, 3)
var count int = 0&lt;/p&gt;
&lt;p&gt;//scanner는 기본적으로 input을 split함으로써 여러개의 token을 만들어낸다. split function은 설정할 수 있다. default는 \n 이다.
//scanner.Scan은 더 읽을 Token이 남았을 때 True를 반환한다. 다 읽으면 False를 반환한다
for scanner.Scan() {
value[count] = scanner.Text()
count++
}&lt;/p&gt;
&lt;p&gt;sec, _ = strconv.ParseUint(value[0], 10, 64)
dob, _ = strconv.ParseFloat(value[1], 64)
str = value[2]
// Print the sum of both integer variables on a new line.
fmt.Printf(&amp;quot;%d\n&amp;rdquo;, i+sec)&lt;/p&gt;
&lt;p&gt;// Print the sum of the double variables on a new line.
fmt.Printf(&amp;quot;%.1f\n&amp;quot;, d+dob)&lt;/p&gt;
&lt;p&gt;// Concatenate and print the String variables on a new line
fmt.Printf(&amp;quot;%v&amp;quot;, s+str)
// The &amp;rsquo;s&#39; variable above should be printed first.
{% endhighlight%}&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: GO interface와 JSON</title>
      <link>/blog/2017/07/22/go-interface%EC%99%80-json/</link>
      <pubDate>Sat, 22 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017/07/22/go-interface%EC%99%80-json/</guid>
      <description>
        
        
        &lt;p&gt;Go 함수들에서 interface{}를 parameter로 받는 일은 꽤 흔한 일이다. 가장 대표적인 예가&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;func Println(a &amp;hellip;interface{}) (n int, err error)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이는 interface 여러개를 input으로 받고, 해당 interface의 타입에 맞게 출력을 해준다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//string 타입 a
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//int 타입인 c
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;endhighlight&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;practice&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;go&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;hello&lt;/span&gt;
&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;

&lt;span style=&#34;color:#000&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;하면&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;위와&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;같이&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;값을&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Println에&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;넣었을&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;때&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;알아서&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;적합한&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;형태로&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;출력해준다&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;함수내에서&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;파라미터로&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;들어온&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;값의&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;타입과&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;값을&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;판단하여&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;출력해주기&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;때문&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;interface에&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;관한&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;예제를&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;몇&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;개&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;더&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;해보자&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#4e9a06&#34;&gt;``&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;go&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;MyError&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;When&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Time&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;What&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;func (e *MyError) Error() string {
return fmt.Sprintf(&amp;ldquo;at %v, %s&amp;rdquo;,
e.When, e.What)
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func run() error {
	return &amp;amp;MyError{
		time.Now(),
		&amp;quot;it didn&#39;t work&amp;quot;,
	}
}

func main() {
	if err := run(); err != nil {
		fmt.Println(err)
	}
}
{% endhighlight%}
위 예제는 error에 관한 건데, 일반적으로 go programming에서는 error를 리턴하는 경우가 흔하다.
fmt 패키지가 Println을 통해 err 객체를 출력할때, Error 인터페이스를 구현하고 있는 지 찾는다고 한다.

&amp;gt; type error interface {
    Error() string
}

여기서도 마찬가지로 err 객체가 Error 인터페이스를 구현하고 있는지, Error 메소드를 가지는 지 찾아보면,
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;func (e *MyError) Error() string {}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MyError 구조체는 이 메소드를 가진다.(composition) 따라서, 위 메소드가 호출된다.
```go
package main

import (
	&amp;quot;fmt&amp;quot;
)
type ErrNegativeSqrt float64

func (e ErrNegativeSqrt) Error() string{
	return fmt.Sprintf(&amp;quot;cannot Sqrt negative number : %g&amp;quot;, e)
}

func Sqrt(x float64) (float64, error) {
	if x &amp;lt; 0{
	  return 0, ErrNegativeSqrt(x)
	}
	return 0, nil
}

func main() {
	fmt.Println(Sqrt(2))
	fmt.Println(Sqrt(-2))
}
{% endhighlight%}
Exercise 예제를 하나 더 보면, ErrNegativeSqrt 라는 이름의 타입을 하나 정의한다. 그럼, sqrt(-2)를 호출했을때, if문에 의해 ErrNegativeSqrt 타입의 객체를 반환하게 된다. fmt가 Println을 수행할 때, 위 객체의 Error 인터페이스를 찾고, Error 메소드를 구현하고 있으므로, 해당 메소드를 출력해주면 된다.

## Json Marshall and UnMarshall
참고) [json by example](https://gobyexample.com/json)

인터페이스를 공부하게 된 계기가 되어준게 JSON string으로의 인코딩이었다. Go data structure 타입의 객체를 Json으로 인코딩하여 API Response를 날려줘야하므로, standard library인 encoding/json을 이용해야했다.
json.Marshal(var interface{}) 함수는 interface{}형태의 파라미터를 받아 해당 변수의 type, value값을 판단하여 json 형태로 encode해준다.

json.Unmarshal은 당연히 그 반대과정인 decoding을 수행하는데, 예제에도 나와있듯 decode된 데이터를 담을 dat이라는 변수를 선언해준다. 이 변수는 string key에 interface{} value값을 가지는데, byt로 들어온 json string 값을 decode하여 dat의 자료구조에 적합하게 집어넣어준다. interface{}로 선언한 까닭에 여러가지 값이 value로 들어갈 수 있다.

```go
var dat map[string]interface{}
//Here’s the actual decoding, and a check for associated errors.
//go 에서는 이런식으로 error를 체크해주는것이 좋다.
    if err := json.Unmarshal(byt, &amp;amp;dat); err != nil {
        panic(err)
    }
    fmt.Println(dat)
{% endhighlight%}

참고 예제에 나와있듯, decode된 객체의 값들을 사용하기 위해서 적합한 값으로 cast해줘야한다. (interface{}로 value를 받았으므로)     
```go
num, ok := dat[&amp;quot;num&amp;quot;].(float64)
if ok{
    fmt.Println(num)
}
{% endhighlight%}
nested data 구조에 접근하기 위해서는 연속적인 cast를 필요로 할 수 있다.

```go
  strs := dat[&amp;quot;strs&amp;quot;].([]interface{})
  str1 := strs[0].(string)
  fmt.Println(str1)
{% endhighlight%}
예상되는 타입으로 cast하고 해당값을 자유롭게 go 에서 사용할 수 있다.

참고) go tour
요약) ok 없이 interface의 type assertion을 수행하면, 실제로 변환이 불가능할땐 panic이 발생한다. ok가 있으면 interface가 해당 타입을 가지면, true 아니면 false가 되고 t는 해당 타입 T의 zero value가 되고 panic이 발생하지 않는다.
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: docker 이미지로 centos pull</title>
      <link>/blog/2017/07/18/docker-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%A1%9C-centos-pull/</link>
      <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017/07/18/docker-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%A1%9C-centos-pull/</guid>
      <description>
        
        
        &lt;h2 id=&#34;docker-사용하기&#34;&gt;docker 사용하기&lt;/h2&gt;
&lt;p&gt;도커는 굉장히 편하다. 일단 일반 vm처럼 네트워크설정을 할필요도 없고(host, 즉 그냥 내 컴퓨터의 resource들을 사용하므로) 가벼우므로, 완전한 가상머신을 제공하는 VMWARE나 VirtualBox보다 부담이 적다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker pull ubuntu:latest
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;% endhighlight%&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
docker pull &amp;lt;이미지&amp;gt;:&amp;lt;태그&amp;gt;로 간편하게 이미지를 받을 수 있다. 이를 pull이라고한다. 도커는 docker hub라는, image repository가 있기 때문에 docker hub에서 전세계 다양한 사용자들이 만든 이미지를 다운 받아 사용할 수 있다. centOs, Ubuntu, fedora등 대부분의 linux 운영체제는 공식 이미지를 사용하기 때문에 docker hub를 통하지 않고 위와 같이 다운로드할 수 있다.

터미널에서 *docker search ~* 명령어를 이용하면 이미지를 찾아볼 수도 있다. ex&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; docker search golang으로 검색하면 go 와 관련된 도커 이미지들이 나오고 star도 나오므로 유명한 이미지가 우선적으로 나온다

&lt;span style=&#34;color:#4e9a06&#34;&gt;```&lt;/span&gt;bash
docker run -i -t &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;container_name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; /bin/bash
//새롭게 컨테이너 만들 때는 아래와 같이 /bin/bash를 실행하도록 지정한다
docker &lt;span style=&#34;color:#204a87&#34;&gt;exec&lt;/span&gt; -i -t &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;container_name&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; bash
//컨테이너에 직접접속
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;% endhighlight%&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;

아까 설치한 이미지를 컨테이너로 생성한후, 배시셸을 실행하는 명령어이다.
--name은 해도되고 안해도 되는 option으로 이름을 지정하고 싶다면 해당 옵션을 주면된다. 안주게되면 manual하게 도커가 이름을 준다. &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;나름 다양하다&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
-it 옵션을 통해 bash 셸에 입출력이 가능하게 된다.
&lt;span style=&#34;color:#4e9a06&#34;&gt;```&lt;/span&gt;bash
docker ps
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;% endhighlight%&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
로 현재 실행되고 있는 컨테이너를 출력할 수 있다. container ID를 얻을수있다. &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;-a 옵션을 추가하면 실행되고 있지는 않지만 존재하는 container까지 출력할 수 있다&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; docker stop, restart 등으로 컨테이너를 중지, 재시작 할 수 있다.

중단한 container라고 하더라도, start로 다시 살려서 attach로 다시 접속할 수 있다.

&lt;span style=&#34;color:#4e9a06&#34;&gt;```&lt;/span&gt;bash
docker login
docker commit -m &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;added golang&amp;#34;&lt;/span&gt; -a &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;centos with golang latest&amp;#34;&lt;/span&gt; affectionate_hugle nayoonhwang/centos_with_go
docker push nayoonhwang/centos_with_go

//docker hub에 올라가있는 centos_with_go 이미지를 다운받아 사용할 수 있다
docker pull nayoonhwang/centos_with_go
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;% endhighlight%&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
터미널로 내 docker계정에 로그인하여, 현재 작업하고 있던 컨테이너&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;affectionate_hugle&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;를 docker repository로 push할 수 있다. 나의 경우에는 go lang을 설치해놓은 centos를 원격저장소에 올려놓았다.
내가 참조한 링크: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;How to create image and push it to docker hub&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;](&lt;/span&gt;http://www.techrepublic.com/article/how-to-create-a-docker-image-and-push-it-to-docker-hub/&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: git rebase</title>
      <link>/blog/2017/07/18/git-rebase/</link>
      <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017/07/18/git-rebase/</guid>
      <description>
        
        
        &lt;h1 id=&#34;git&#34;&gt;Git&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;git rebase -i HEAD~n
ex) git rebase -i HEAD~4
rebase는 이루어진 커밋들에 drop, squash, edit등의 수정작업을 하기 위함이다. 예시로 든 명령은 Head가 가르키고 있는 커밋부터 4개까지 rebase 하겠다는 것인데.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  pick 1df44db python dashinsert
  pick 3409e57 &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20170630&lt;/span&gt; friking week
  pick 2dcbf08 .gitignore update
  pick 126181c .
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Rebase f406725..126181c onto f406725 (4 commands)&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Commands:&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# p, pick = use commit&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# r, reword = use commit, but edit the commit message&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# e, edit = use commit, but stop for amending&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# s, squash = use commit, but meld into previous commit&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# f, fixup = like &amp;#34;squash&amp;#34;, but discard this commit&amp;#39;s log message&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# x, exec = run command (the rest of the line) using shell&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# d, drop = remove commit&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# These lines can be re-ordered; they are executed from top to bottom.&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# If you remove a line here THAT COMMIT WILL BE LOST.&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# However, if you remove everything, the rebase will be aborted.&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#&lt;/span&gt;
  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Note that empty commits are commented out&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;% endhighlight%&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;

이런식으로 나타난다. 이때 pick이라고 되어있는 commit에 command를 입력해주면, 즉,

&lt;span style=&#34;color:#4e9a06&#34;&gt;```&lt;/span&gt;bash
pick 3409e57 &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20170630&lt;/span&gt; friking week
pick 2dcbf08 .gitignore update
s 126181c .
pick c1c9582 ..
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;% endhighlight%&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
이렇게 해주면 .이라고 커밋메세지가 써있는 commit은 squash되어 이전의 커밋과 합쳐진다.

&lt;span style=&#34;color:#4e9a06&#34;&gt;```&lt;/span&gt;bash
pick 1df44db python dashinsert
pick 3409e57 &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;20170630&lt;/span&gt; friking week
pick &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;9308320&lt;/span&gt; .gitignore update
reword 47fc658 gitrebase experiment
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;% endhighlight%&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
또는 이렇게 커밋메세지를 변경해줄수도 있다

* git rm --cached .idea/vcs.xml

&lt;span style=&#34;color:#4e9a06&#34;&gt;```&lt;/span&gt;bash
git rm --cached _posts/2017-06-30-friking-week.md
git commit -m &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;remove an article&amp;#34;&lt;/span&gt;
git push
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;% endhighlight%&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;

git에서 추적&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;stage&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;하지 않고, ignore할 수 있는 방법에는 .gitignore에 입력해주는 방법도 있지만, git rm을 이용하는 방법도 있다. 이때 --cached 옵션을 이용하면 실제로 파일을 삭제하지 않고, stage만 피하게 해줄 수 있다. git rm만 해주면 실제로 파일이 삭제되므로 주의해야한다.
예를 들어, 이 블로그에서도 좀 개인적인 부끄러운 일들을 담은 markdown들을 unstage하고 싶을 때 저 방법을 써주면 된다. 이미 remote repo에 올라갔지만 commit 하고 push해주면 변경사항이 remote에도 반영된다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: studying IOT</title>
      <link>/blog/2017/06/20/studying-iot/</link>
      <pubDate>Tue, 20 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017/06/20/studying-iot/</guid>
      <description>
        
        
        &lt;p&gt;#Internet
&lt;em&gt;internetworking 기술: 여러가지 네트워크를 연결하여 하나의 기준을 둠으로서, 다양한 하드웨어 기술이 결할될 수 있도록 만드는 기술&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;tcpip-네트워크-모델&#34;&gt;TCP/IP 네트워크 모델&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;특징&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;특정 하드웨어나 운영체제에 독립적인 개방형 프로토콜&lt;/li&gt;
&lt;li&gt;물리적 네트웨크에 독립적.&lt;/li&gt;
&lt;li&gt;전세계에 유일한 주소체계를 사용한다.&lt;/li&gt;
&lt;li&gt;표준화되어있으며 널리 사용된다.
&lt;strong&gt;동작과정&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;TCP는 사용자의 데이터를 TCP 패킷으로 나눈다.&lt;/li&gt;
&lt;li&gt;IP는 TCP 패킷에 목적지 주소에 대한 정보를 추가한다.&lt;/li&gt;
&lt;li&gt;TCP는 각각 도착한 IP패킷을 모아 호스트 컴퓨터가 사용할 수 있는 데이터로 변환, 변환시 오류 검출, 오류 발생시 재전송을 요청한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;서비스 제공을 위한 연결
HTTP : 데이터(메세지)
TCP : 세그멘트(TCP헤더 + 데이터)
IP : 패킷(IP헤더 + 세그멘트)
이더넷 : 프레임(패킷 + 이더넷 헤더)
네트워크 인터페이스: 비트스트림&lt;/p&gt;
&lt;p&gt;&lt;em&gt;하드웨어를 통한 연결&lt;/em&gt;
&lt;strong&gt;인터넷은 LAN(Local Area Network)를 기반으로 구성한다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;물리계층과 데이터계층이 하드웨어에 따라 다르다.&lt;/li&gt;
&lt;li&gt;이더넷 - IEEE802.3&lt;/li&gt;
&lt;li&gt;와이파이 - IEEE802.11
&lt;strong&gt;이더넷이나 와이파이로 연결된 기기들은 48비트의 MAC 주소로 구분한다&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;IP 주소&lt;/strong&gt;
v4는 32비트에 인데 반해 v6는 128비트이다.
지역별로 할당되어 데이터 전달 경로를 결정하기에 적합하도록 만들어진 소프트웨어적 주소.
ARP 프로토콜을 통해 MAC주소와 IP주소를 매핑한다.&lt;/p&gt;
&lt;p&gt;IP: 패킷으로 만들어진 데이터를 목적지까지 전달하는 과정을 담당한다.
TCP: 데이터가 목적지까지 &amp;lsquo;정확하게&amp;rsquo; 전달될 수 있도록 책임진다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;두 기기사이의 데이터 흐름을 관리&lt;/li&gt;
&lt;li&gt;수신된 데이터에 대해서 acknowledgement를 통해 데이터가 수신되었음을 알려준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;UDP vs TCP&lt;/em&gt;
UDP는 비연결형, 단순한 전송 프로토콜로서, 신뢰성이 없고 ack가 없는 best-effort 전송 방식이다. 재전송은 수행하지 않고, 데이터 흐름 관리 기능이 없다. 대신 부하가 매우 낮고, 전송 속도가 매우 빠르다. 데이터의 완전성보다 전달 속도가 중요하고, 소량의 데이터를 송신하고, 멀티캐스트/브로드캐스를 사용하는 어플리케이션에 사용된다.데이터의 일부가 손실되는 것이 중요하지 않은 어플리케이션(비디오, 멀티미디어 스트리밍)에 쓰인다.&lt;/p&gt;
&lt;p&gt;TCP는 전송 전 연결을 먼저 맺어야 하는 연결형이며, 어플리케이션이 네트워크 계층 문제를 걱정하지 않고 데이터를 안정적으로 송신할 수 있도록 하는 풍부한 기능의 프로토콜이다. 메세지 전송을 신뢰할 수 있고, 모든 데이터에 대한 ack이 존재하여 손실된 데이터는 자동으로 재전송한다. 윈도우 크기를 적절히 조정하며 슬라이딩 윈도우를 이용한 흐름제어를 하고, 혼잡 회피 알고리즘을 사용하여 데이터 흐름 관리를 한다. 부하, 전송속도 모두 우수하지만, udp보다는 낮다. 소형부터 초대형 데이터까지 송신가능하며, 신뢰할 수 있는 방법으로 데이터를 송신해야하는 대부분의 프로토콜과 어플리케이션. 대부분의 파일/메세지 전송 프로토콜을 포함한다. TCP/IP 어플리케이션을 위한 전송 계층 프로토콜. HTTP, FTP, SMTP등에 사용한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TCP는 데이터 전송시 데이터를 세그멘트로 분할하여 &lt;strong&gt;순서대로&lt;/strong&gt; 전송한다. 단, ack를 받지 못한 세그멘트에 대해서는 재전송한다. 목적지의 host는 sequence number에 따라 데이터를 재구성한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;인터넷 연결을 위한 설정&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;고정 ip
유동 ip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DHCP(Dynamic Host Configuration Protocol)
사설 ip&lt;/li&gt;
&lt;li&gt;공식적으로 IP 주소 사용에 대한 허가를 받지 않고 임의로 사용&lt;/li&gt;
&lt;li&gt;192.168.xxx.xxx 가 많이 사용된다.
서브넷 마스크&lt;/li&gt;
&lt;li&gt;하나의 ip 네트워크 주소를 다시 여러 ip 서브 네트워크로 분할하는 기능을 수행.
브로드캐스트 주소&lt;/li&gt;
&lt;li&gt;ip와 subnetmask를 and 연산하여 얻어진 네트워크 주소에서 subnetmask의 0으로된 비트를 모두 1로 바꾸어주면 구할 수 있다.  -&amp;gt; 네트워크: 165.132.120.0 서브넷: 255.255.252.0 일때 브캐: 165.132.123.255이다.
게이트웨이&lt;/li&gt;
&lt;li&gt;인터넷과 직접 연결되어 있는 주소
DNS&lt;/li&gt;
&lt;li&gt;호스트 네임을 ip 주소로 변환한다. 윈도우에서 ping, nslookup, tracert를 이용하면 ip 확인이 가능하다.
&lt;em&gt;네트워크를 효율적으로 나누기 위해 서브넷을 이용하는 것이 유용하나, 다수의 ip 주소가 낭비된다 (네트워크 id, 브로드캐스트 주소등)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;이더넷&lt;/strong&gt;
이더넷 쉴드&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;근거리 네트워크(Local Area Network, LAN)을 구성하는 방식에 관한 표준&lt;/li&gt;
&lt;li&gt;1983년 IEEE 802.3으로 표준화&lt;/li&gt;
&lt;li&gt;유선 연결을 통한 네트워크의 90% 이상을 차지&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이더넷 라이브러리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ipaddress 클래스, ethernetclass 클래스, Ethernetclient 클래스, Ethernetserver 클래스 등으로 구성.&lt;/li&gt;
&lt;li&gt;ipaddress 클래스 : ip주소를 지정하기 위한 클래스&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;ipv4를 지원.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;ethernetclass 클래스 : 아두이노가 이더넷을 통해 데이터를 주고 받을 수 있도록 이더넷 쉴드를 설정하는 역할. 이더넷 라이브러리와 네트워크 설정을 초기화, ip주소를 동적으로 할당받을 수 있도록 dhcp 지원. but, dhcp 사용시, 스케치 크기 증가.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;int begin(u8int_t mac_address)
&lt;em&gt;int maintain()함수는 dhcp를 통해 할당된 ip주소를 갱신할 때 사용한다. 0-4까지 반환값에 따라, renew(동일 dhcp서버에서 ip 갱신) rebind(새로운 dhcp 서버로부터 주소 할당) 성공 여부를 나타낸다.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Ethernetserver 클래스: 다른 컴퓨터나 기기에서 실행 중인 클라이언트의 요청을 받아들이고 클라이언트와의 통신을 관리하기 위한 클래스.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Ethernetserver(uint16_t port) : 지정한 포트로 들어오는 클라이언트의 요청을 감시하는 서버 객체를 생성.&lt;/li&gt;
&lt;li&gt;void begin(void): 서버를 시작하여 서버 생성시에 지정한 포트로 들어오는 클라이언트 요청을 감시한다. 클라이언트의 요청이 들어오면 클라이언트와 통신하기 위한 소켓을 생성하여 클라이언트와 연결. 이더넷은 최대 4개의 소켓을 동시에 사용.&lt;/li&gt;
&lt;li&gt;Ethernetclient available(void) : 서버에 접속된 클라이언트 중 서버에서 읽어 들일 수 있는 데이터를 보낸 클라이언트 객체를 반환. 클라이언트의 접속 요청이 있을 때, 클라리언트의 접속을 허용하는 절차를 Ethernet 라이브러리가 자동으로 처리하여 연결이 이루어지면, 서버는 클라이언트 별로 연결을 관리한다.&lt;/li&gt;
&lt;li&gt;size_t write(const uint8_t *buf, size_t size) : 서버에 접속된 모든 클라이언트로 데이터 전송, 개별 클라이언트로 전송된 바이트 수를 합한 값이 반환됨.&lt;/li&gt;
&lt;li&gt;print : serial 클래스의 print와 동일.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Ethernetclient 클래스&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Ethernetclient() : 이더넷 클라이언트 객체를 생성하는 생성자로 생성된 클라이언트는 connect 함수를 통한 지정한 ip주소와 포트를 가진 서버로 접속한다.&lt;/li&gt;
&lt;li&gt;int connect : 지정된 서버의 주소와 포트를 통해 서버로 접속을 시도한다. 성공시 true 실패시 false를 반환한다. 서버의 주소값은 문자열일 수도 있고 IPAddress객체의 형식일수도 있다.&lt;/li&gt;
&lt;li&gt;int read : 수신버퍼의 바이트 데이터를 읽는다&lt;/li&gt;
&lt;li&gt;void flush : 서버로부터 전송되어 아직 읽지 않은 데이터를 읽어서 수신버퍼를 비운다.&lt;/li&gt;
&lt;li&gt;void stop : 접속 종료&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;iot를-위한-프로토콜&#34;&gt;Iot를 위한 프로토콜&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;HTTP : Hypertext transfer protocol&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Request/Response 프로토콜 (client가 서버에 정보 요청. 서버가 응답)&lt;/li&gt;
&lt;li&gt;Request : Method, resource, headers, Content&lt;/li&gt;
&lt;li&gt;Response : statusCode, Headers, Content&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Method&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Get, Put/Delete, Post등&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;HTTP protocol stack&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;HTTP/HTTPS(URLs)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;TCP(port# default: 80/443)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Internet Protocol(IP, ip주소들)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Local Area Network(LAN, mac 주소들)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Physical(Cables, Radio, etc)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SSL/TLS로 암호화하면 https&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CoAP : Constrained Application Protocol&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;메모리, 에너지, 성능 등에 제약이 있는 M2M 환경을 위한 웹 기반 프로토콜.&lt;/li&gt;
&lt;li&gt;UDP 기반의 Request/Response 모델로 동작.&lt;/li&gt;
&lt;li&gt;UDP와 CoAP 계층 사이에 DTLS가 사용될 수 있음.&lt;/li&gt;
&lt;li&gt;binary header가 더 간결하고, option의 수가 감소, method도 4가지만 존재.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTP의 tcp 대신 udp(port 5683)이 들어간다는게 차이점.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MQTT : Message Queue Telemetry Transport protocol&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Publisher, Subscriber, Message broker, Topics&lt;/li&gt;
&lt;li&gt;Http와 다르게, TCP 포트가 1883/8883(보안 무/유)으로 지정되어있다.&lt;/li&gt;
&lt;li&gt;3 QoS&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;wifi&#34;&gt;Wifi&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;와이파이는 이더넷과 더불어 인터넷에 물리적으로 연결되기 위 한 방법을 제공&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실제 데이터 교환과 서비스 제공은 상위 계층에서 이루어짐&lt;/li&gt;
&lt;li&gt;물리적인 연결의 차이점을 제외하면 이더넷과 거의 동일한 방법으로 와이파이 사용이 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CSMA/CA&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A가 B로 패킷을 보내고 싶을 때, B에게 먼저 RTS를 보낸다. B가 RTS를 받으면, A에게 CTS를 보냄으로써 응답한다. C가 CTS를 overhear하면, keeps quiet for a while.&lt;/p&gt;
&lt;p&gt;A가 B에서 RTS보내면 A주변의 노드들이 NAV(무선통신에서 사용하는 virtual carrier sensing mechanism)를 통해 keep quiet하게 된다. B에서 A로 CTS 보낼 떄 B 주변의 노드들 또한 NAV를 통해 keep quiet하게 된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wifi 라이브러리&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wifi, Wificlient, WifiServer 클래스 정의.&lt;/li&gt;
&lt;li&gt;이더넷과 차이는 네트워크 연결을 위해 AP와의 연결이 필요(AP의 SSID와 패스워드가 필요할것입니다).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Wifi 클래스 (전체적인 와이파이 연결시작, 신호세기, 맥주소 할당등 연결을 위해 필요한 설정을 담당한다)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;begin 함수는 연결하고자 하는 와이파이의 ssid, password를 파라미터로 전달합니다. config함수와 달리 dhcp를 통해 유동 ip를 자동으로 할당받는다. config함수는 정적 ip 주소를 사용하기 때문에 파라미터에 IPAddress 객체를 전달해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Wifi Server 클래스&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이더넷과 흡사하게 available함수는 서버에 접속된 WifiClient 객체를 반환한다.
&lt;em&gt;Wifi Client 클래스&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;이더넷과 마찬가지로, connect 함수를 사용하여 지정된 ip주소와 포트를 통해 서버에 접속한다.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: MYSQL</title>
      <link>/blog/2017/06/06/mysql/</link>
      <pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017/06/06/mysql/</guid>
      <description>
        
        
        &lt;h2 id=&#34;인생이-고난의-연속이듯이-개발도-삽질의-연속인걸까&#34;&gt;인생이 고난의 연속이듯이 개발도 삽질의 연속인걸까.&lt;/h2&gt;
&lt;h2 id=&#34;mysql-설치&#34;&gt;mysql 설치&lt;/h2&gt;
&lt;h2 id=&#34;닥치고-homebrew&#34;&gt;닥치고 Homebrew&lt;/h2&gt;
&lt;p&gt;삽질의 원인&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo lsof -i -n -P | grep TCP&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;mysql -u root -p&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;로 my sql 접속을 시도했을때,&lt;/p&gt;
&lt;p&gt;자꾸 mysql Authentication 에러가 떴었다.
설치되어있던 &lt;em&gt;/usr/local/var/mysql&lt;/em&gt; 의 nayoon.err의 로그를 보니, 자꾸 3306에 이미 mysqld가 돌고 있다는것.&lt;/p&gt;
&lt;p&gt;이걸 강제로 죽일라고 pid 알아내기 위해 netstat이란 명령어를 찾았으나, 맥 터미널용은 아닌듯했다.&lt;/p&gt;
&lt;p&gt;결국 스택오버플로우에서 &lt;em&gt;lsof&lt;/em&gt; 라는 명령어를 찾아서 pid찾아내고 kill했다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/4421633/who-is-listening-on-a-given-tcp-port-on-mac-os-x&#34;&gt;내 컴퓨터에서 돌고있는 tcp 프로세스 알아내기&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;kill 하고&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mysql.server start&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;하니 너무 잘되네?^^ㅠㅠㅠㅠㅠㅠㅠㅠㅠ&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mysql_secure_installation&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;명령어로 비밀번호 설정하고 무사히 mysql 설치완료.&lt;/p&gt;
&lt;p&gt;마지막으로 유저 권한 설정을 위해,&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://link2me.tistory.com/431&#34;&gt;mysql 유저 권한 설정.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;유저 권한을 설정해야 외부에서도 접속 가능하기 때문. 난 일단 testdb 데이터베이스의 NAYOON 사용자의 localhost와 외부 ip를 허용해놓았다.&lt;/p&gt;
&lt;p&gt;오늘도 삽질~ ^ㅇ^ &amp;gt;ㅇ&amp;lt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
